#ifndef REG_LTPI_TYPE_H_
#define REG_LTPI_TYPE_H_
#include <stdint.h>

typedef struct
{
    volatile uint32_t LINK_ST; //0x0
    volatile uint32_t CAP_LOCAL; //0x4
    volatile uint32_t CAP_REMOTE; //0x8
    volatile uint32_t PF_ID_LOCAL; //0xc
    volatile uint32_t PF_ID_REMOTE; //0x10
    volatile uint32_t AD_CAP_LOW_LOCAL; //0x14
    volatile uint32_t AD_CAP_HIGH_LOCAL; //0x18
    volatile uint32_t AD_CAP_LOW_REMOTE; //0x1c
    volatile uint32_t AD_CAP_HIGH_REMOTE; //0x20
    volatile uint32_t DEFAULT_CON_LOW; //0x24
    volatile uint32_t DEFAULT_CON_HIGH; //0x28
    volatile uint32_t LINK_ALIGN_ERR_CNT; //0x2c
    volatile uint32_t LINK_LOST_ERR_CNT; //0x30
    volatile uint32_t CRC_ERR_CNT; //0x34
    volatile uint32_t UNKNOWN_COMMA_ERR_CNT; //0x38
    volatile uint32_t LINK_SP_TO_ERR_CNT; //0x3c
    volatile uint32_t CON_ACC_TO_ERR_CNT; //0x40
    volatile uint32_t LINK_TRAIN_RX_FRM_CNT_LOW; //0x44
    volatile uint32_t LINK_TRAIN_RX_FRM_CNT_HIGH; //0x48
    volatile uint32_t LINK_TRAIN_TX_FRM_CNT_LOW; //0x4c
    volatile uint32_t LINK_TRAIN_TX_FRM_CNT_HIGH; //0x50
    volatile uint32_t OP_RX_FRM_CNT; //0x54
    volatile uint32_t OP_TX_FRM_CNT; //0x58
    volatile uint32_t RESERVED0[9];
    volatile uint32_t LINK_CONTROL; //0x80
    volatile uint32_t RESERVED1[31];
    volatile uint32_t INTR_MASK; //0x100
    volatile uint32_t DATA_CHANNEL_TAG; //0x104
    volatile uint32_t LTPI_LINK_ST; //0x108
    volatile uint32_t DC_PADDR_CFG; //0x10c
    volatile uint32_t SYS_INTR_MSK_31_0; //0x110
    volatile uint32_t SYS_INTR_MSK_63_32; //0x114
    volatile uint32_t SYS_INTR_MSK_95_64; //0x118
    volatile uint32_t SYS_INTR_MSK_127_96; //0x11c
    volatile uint32_t SYS_INTR_MSK_159_128; //0x120
    volatile uint32_t SYS_INTR_STT_31_0; //0x124
    volatile uint32_t SYS_INTR_STT_63_32; //0x128
    volatile uint32_t SYS_INTR_STT_95_64; //0x12c
    volatile uint32_t SYS_INTR_STT_127_96; //0x130
    volatile uint32_t SYS_INTR_STT_159_128; //0x134
    volatile uint32_t TX_OFFSET_CNT_FREQ1; //0x138
    volatile uint32_t TX_OFFSET_CNT_FREQ2; //0x13c
    volatile uint32_t TX_OFFSET_CNT_FREQ3; //0x140
    volatile uint32_t TX_OFFSET_CNT_FREQ4; //0x144
    volatile uint32_t TX_OFFSET_CNT_FREQ5; //0x148
    volatile uint32_t TX_OFFSET_CNT_FREQ6; //0x14c
    volatile uint32_t CONTROLLER_CNT0_200M; //0x150
    volatile uint32_t CONTROLLER_CNT1_200M; //0x154
    volatile uint32_t TARGET_CNT0_200M; //0x158
    volatile uint32_t TARGET_CNT1_200M; //0x15c
    volatile uint32_t CONTROLLER_CNT0_120M; //0x160
    volatile uint32_t CONTROLLER_CNT1_120M; //0x164
    volatile uint32_t TARGET_CNT0_120M; //0x168
    volatile uint32_t TARGET_CNT1_120M; //0x16c
}reg_ltpi_t;

enum LTPI_REG_LINK_ST_FIELD
{
    LTPI_LINK_ALIGN_MASK = (int)0x1,
    LTPI_LINK_ALIGN_POS = 0,
    LTPI_LINK_LOST_ERR_MASK = (int)0x2,
    LTPI_LINK_LOST_ERR_POS = 1,
    LTPI_FRM_CRC_ERR_MASK = (int)0x4,
    LTPI_FRM_CRC_ERR_POS = 2,
    LTPI_UNKNOWN_COMMA_ERR_MASK = (int)0x8,
    LTPI_UNKNOWN_COMMA_ERR_POS = 3,
    LTPI_LINK_SP_TO_ERR_MASK = (int)0x10,
    LTPI_LINK_SP_TO_ERR_POS = 4,
    LTPI_CON_ACC_TO_ERR_MASK = (int)0x20,
    LTPI_CON_ACC_TO_ERR_POS = 5,
    LTPI_LINK_DDR_MODE_MASK = (int)0x80,
    LTPI_LINK_DDR_MODE_POS = 7,
    LTPI_LINK_SPEED_MASK = (int)0xf00,
    LTPI_LINK_SPEED_POS = 8,
    LTPI_LINK_ST_REMOTE_MASK = (int)0xf000,
    LTPI_LINK_ST_REMOTE_POS = 12,
    LTPI_LINK_ST_LOCAL_MASK = (int)0xf0000,
    LTPI_LINK_ST_LOCAL_POS = 16,
};

enum LTPI_REG_CAP_LOCAL_FIELD
{
    LTPI_MIN_VER_LOCAL_MASK = (int)0xf,
    LTPI_MIN_VER_LOCAL_POS = 0,
    LTPI_MAJOR_VER_LOCAL_MASK = (int)0xf0,
    LTPI_MAJOR_VER_LOCAL_POS = 4,
    LTPI_SP_CAP_LOCAL_MASK = (int)0xffff00,
    LTPI_SP_CAP_LOCAL_POS = 8,
};

enum LTPI_REG_CAP_REMOTE_FIELD
{
    LTPI_MIN_VER_REMOTE_MASK = (int)0xf,
    LTPI_MIN_VER_REMOTE_POS = 0,
    LTPI_MAJOR_VER_REMOTE_MASK = (int)0xf0,
    LTPI_MAJOR_VER_REMOTE_POS = 4,
    LTPI_SP_CAP_REMOTE_MASK = (int)0xffff00,
    LTPI_SP_CAP_REMOTE_POS = 8,
};

enum LTPI_REG_PF_ID_LOCAL_FIELD
{
    LTPI_PF_ID_LOCAL_MASK = (int)0xffff,
    LTPI_PF_ID_LOCAL_POS = 0,
};

enum LTPI_REG_PF_ID_REMOTE_FIELD
{
    LTPI_PF_ID_REMOTE_MASK = (int)0xffff,
    LTPI_PF_ID_REMOTE_POS = 0,
};

enum LTPI_REG_LINK_TRAIN_RX_FRM_CNT_LOW_FIELD
{
    LTPI_LINK_DET_FRM_RX_CNT_MASK = (int)0xffff,
    LTPI_LINK_DET_FRM_RX_CNT_POS = 0,
    LTPI_LINK_SP_FRM_RX_CNT_MASK = (int)0xff0000,
    LTPI_LINK_SP_FRM_RX_CNT_POS = 16,
    LTPI_CON_ACC_FRM_RX_CNT_MASK = (int)0xff000000,
    LTPI_CON_ACC_FRM_RX_CNT_POS = 24,
};

enum LTPI_REG_LINK_TRAIN_TX_FRM_CNT_LOW_FIELD
{
    LTPI_LINK_DET_FRM_TX_CNT_MASK = (int)0xffff,
    LTPI_LINK_DET_FRM_TX_CNT_POS = 0,
    LTPI_LINK_SP_FRM_TX_CNT_MASK = (int)0xff0000,
    LTPI_LINK_SP_FRM_TX_CNT_POS = 16,
    LTPI_CON_ACC_FRM_TX_CNT_MASK = (int)0xff000000,
    LTPI_CON_ACC_FRM_TX_CNT_POS = 24,
};

enum LTPI_REG_LINK_CONTROL_FIELD
{
    LTPI_LINK_SW_RST_MASK = (int)0x1,
    LTPI_LINK_SW_RST_POS = 0,
    LTPI_LINK_RETRAIN_REQ_MASK = (int)0x2,
    LTPI_LINK_RETRAIN_REQ_POS = 1,
    LTPI_I2C_RST_MASK = (int)0xfc,
    LTPI_I2C_RST_POS = 2,
    LTPI_DATA_CH_RST_MASK = (int)0x100,
    LTPI_DATA_CH_RST_POS = 8,
    LTPI_AUTO_CON_ST_MASK = (int)0x200,
    LTPI_AUTO_CON_ST_POS = 9,
    LTPI_TRIG_CON_ST_MASK = (int)0x400,
    LTPI_TRIG_CON_ST_POS = 10,
};

enum LTPI_REG_INTR_MASK_FIELD
{
    LTPI_START_MASK = (int)0x1,
    LTPI_START_POS = 0,
    LTPI_INTR_MASK_MASK = (int)0x6,
    LTPI_INTR_MASK_POS = 1,
    LTPI_PHY_TXCLK_PH_MASK = (int)0x10,
    LTPI_PHY_TXCLK_PH_POS = 4,
};

enum LTPI_REG_DATA_CHANNEL_TAG_FIELD
{
    LTPI_DATA_CHANNEL_TAG_O_MASK = (int)0xff,
    LTPI_DATA_CHANNEL_TAG_O_POS = 0,
    LTPI_DATA_CHANNEL_TAG_I_MASK = (int)0xff00,
    LTPI_DATA_CHANNEL_TAG_I_POS = 8,
};

enum LTPI_REG_LTPI_LINK_ST_FIELD
{
    LTPI_TXPLL_LOCKED_MASK = (int)0x1,
    LTPI_TXPLL_LOCKED_POS = 0,
    LTPI_LTPI_LINK_ST_MASK = (int)0xf0,
    LTPI_LTPI_LINK_ST_POS = 4,
};

enum LTPI_REG_DC_PADDR_CFG_FIELD
{
    LTPI_DC_PADDR_CFG_MASK = (int)0x3,
    LTPI_DC_PADDR_CFG_POS = 0,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ1_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ1_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ1_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ1_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ1_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ2_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ2_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ2_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ2_DDR_POS = 24,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ2_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ3_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ3_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ3_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ3_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ4_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ4_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ4_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ4_DDR_POS = 24,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ3_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ6_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ6_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ6_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ6_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ8_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ8_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ8_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ8_DDR_POS = 24,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ4_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ10_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ10_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ10_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ10_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ12_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ12_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ12_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ12_DDR_POS = 24,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ5_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ16_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ16_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ16_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ16_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ24_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ24_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ24_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ24_DDR_POS = 24,
};

enum LTPI_REG_TX_OFFSET_CNT_FREQ6_FIELD
{
    LTPI_TX_OFFSET_CNT_FREQ32_SDR_MASK = (int)0x7f,
    LTPI_TX_OFFSET_CNT_FREQ32_SDR_POS = 0,
    LTPI_TX_OFFSET_CNT_FREQ32_DDR_MASK = (int)0x7f00,
    LTPI_TX_OFFSET_CNT_FREQ32_DDR_POS = 8,
    LTPI_TX_OFFSET_CNT_FREQ40_SDR_MASK = (int)0x7f0000,
    LTPI_TX_OFFSET_CNT_FREQ40_SDR_POS = 16,
    LTPI_TX_OFFSET_CNT_FREQ40_DDR_MASK = (int)0x7f000000,
    LTPI_TX_OFFSET_CNT_FREQ40_DDR_POS = 24,
};

enum LTPI_REG_CONTROLLER_CNT0_200M_FIELD
{
    LTPI_CTRLER_SCLK_HOLD_CNT0_200M_MASK = (int)0xfff,
    LTPI_CTRLER_SCLK_HOLD_CNT0_200M_POS = 0,
    LTPI_CTRLER_SETUP_TIME_CNT0_200M_MASK = (int)0xff0000,
    LTPI_CTRLER_SETUP_TIME_CNT0_200M_POS = 16,
};

enum LTPI_REG_CONTROLLER_CNT1_200M_FIELD
{
    LTPI_CTRLER_SCLK_HOLD_CNT1_200M_MASK = (int)0xfff,
    LTPI_CTRLER_SCLK_HOLD_CNT1_200M_POS = 0,
    LTPI_CTRLER_SETUP_TIME_CNT1_200M_MASK = (int)0xff0000,
    LTPI_CTRLER_SETUP_TIME_CNT1_200M_POS = 16,
};

enum LTPI_REG_TARGET_CNT0_200M_FIELD
{
    LTPI_TARGET_SCLK_HOLD_CNT0_200M_MASK = (int)0xfff,
    LTPI_TARGET_SCLK_HOLD_CNT0_200M_POS = 0,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT0_200M_MASK = (int)0xfff000,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT0_200M_POS = 12,
    LTPI_TARGET_SETUP_TIME_CNT0_200M_MASK = (int)0xff000000,
    LTPI_TARGET_SETUP_TIME_CNT0_200M_POS = 24,
};

enum LTPI_REG_TARGET_CNT1_200M_FIELD
{
    LTPI_TARGET_SCLK_HOLD_CNT1_200M_MASK = (int)0xfff,
    LTPI_TARGET_SCLK_HOLD_CNT1_200M_POS = 0,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT1_200M_MASK = (int)0xfff000,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT1_200M_POS = 12,
    LTPI_TARGET_SETUP_TIME_CNT1_200M_MASK = (int)0xff000000,
    LTPI_TARGET_SETUP_TIME_CNT1_200M_POS = 24,
};

enum LTPI_REG_CONTROLLER_CNT0_120M_FIELD
{
    LTPI_CTRLER_SCLK_HOLD_CNT0_120M_MASK = (int)0xfff,
    LTPI_CTRLER_SCLK_HOLD_CNT0_120M_POS = 0,
    LTPI_CTRLER_SETUP_TIME_CNT0_120M_MASK = (int)0xff0000,
    LTPI_CTRLER_SETUP_TIME_CNT0_120M_POS = 16,
};

enum LTPI_REG_CONTROLLER_CNT1_120M_FIELD
{
    LTPI_CTRLER_SCLK_HOLD_CNT1_120M_MASK = (int)0xfff,
    LTPI_CTRLER_SCLK_HOLD_CNT1_120M_POS = 0,
    LTPI_CTRLER_SETUP_TIME_CNT1_120M_MASK = (int)0xff0000,
    LTPI_CTRLER_SETUP_TIME_CNT1_120M_POS = 16,
};

enum LTPI_REG_TARGET_CNT0_120M_FIELD
{
    LTPI_TARGET_SCLK_HOLD_CNT0_120M_MASK = (int)0xfff,
    LTPI_TARGET_SCLK_HOLD_CNT0_120M_POS = 0,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT0_120M_MASK = (int)0xfff000,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT0_120M_POS = 12,
    LTPI_TARGET_SETUP_TIME_CNT0_120M_MASK = (int)0xff000000,
    LTPI_TARGET_SETUP_TIME_CNT0_120M_POS = 24,
};

enum LTPI_REG_TARGET_CNT1_120M_FIELD
{
    LTPI_TARGET_SCLK_HOLD_CNT1_120M_MASK = (int)0xfff,
    LTPI_TARGET_SCLK_HOLD_CNT1_120M_POS = 0,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT1_120M_MASK = (int)0xfff000,
    LTPI_TARGET_SCLK_HIGH_TIME_CNT1_120M_POS = 12,
    LTPI_TARGET_SETUP_TIME_CNT1_120M_MASK = (int)0xff000000,
    LTPI_TARGET_SETUP_TIME_CNT1_120M_POS = 24,
};

#endif

