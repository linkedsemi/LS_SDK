#ifndef REG_LTPI_PHY_TYPE_H_
#define REG_LTPI_PHY_TYPE_H_
#include <stdint.h>

struct LTPI_LL_GPIO
{
    volatile uint32_t LOCK;
    volatile uint32_t DATO;
    volatile uint32_t DATI;
    volatile uint32_t RESERVED;
};
struct LTPI_LL_GPIO_INTR
{
    volatile uint32_t GPIO[3];
    volatile uint32_t PHY;
};


typedef struct
{
    struct LTPI_LL_GPIO LL_GPIO[3];//0x00
    struct LTPI_LL_GPIO_INTR LL_INTR_MSK;//0x30
    struct LTPI_LL_GPIO_INTR LL_INTR_CLR;//0x40
    struct LTPI_LL_GPIO_INTR LL_INTR_STT;//0x50
    struct LTPI_LL_GPIO_INTR LL_INTR_RAW;//0x60
    volatile uint32_t SCM_PER_EN; //0x70
    volatile uint32_t PHY_TEST_CFG; //0x74
    volatile uint32_t PHY_CFG; //0x78
    volatile uint32_t RXRST_DLY_VAL; //0x7c
    volatile uint32_t PHY_TX_CTL_30M[8];//0x80
    volatile uint32_t PHY_RX_CTL_30M[6];//0xa0
    volatile uint32_t RESERVED1[2];
    volatile uint32_t PHY_TX_CTL_50M[8];//0xc0
    volatile uint32_t PHY_RX_CTL_50M[6];//0xe0
    volatile uint32_t RESERVED2[2];
    volatile uint32_t PHY_TX_CTL_100M[8];//0x100
    volatile uint32_t PHY_RX_CTL_100M[6];//0x120
    volatile uint32_t PHY_RXDDR_CFG; //0x138
    volatile uint32_t RESERVED3[1];
    volatile uint32_t PHY_TX_CTL_STT0; //0x140
    volatile uint32_t PHY_RX_CTL_STT0; //0x144
    volatile uint32_t PHY_RX_CTL_STT1; //0x148
#if 0
    volatile uint32_t LTPI_LL_GPIOA_LOCK; //0x0
    volatile uint32_t LTPI_LL_GPIOA_DATO; //0x4
    volatile uint32_t LTPI_LL_GPIOA_DATI; //0x8
    volatile uint32_t RESERVED0[1];
    volatile uint32_t LTPI_NL_GPIOB_LOCK; //0x10
    volatile uint32_t LTPI_NL_GPIOB_DATO; //0x14
    volatile uint32_t LTPI_NL_GPIOB_DATI; //0x18
    volatile uint32_t RESERVED1[1];
    volatile uint32_t LTPI_NL_GPIOC_LOCK; //0x20
    volatile uint32_t LTPI_NL_GPIOC_DATO; //0x24
    volatile uint32_t LTPI_NL_GPIOC_DATI; //0x28
    volatile uint32_t RESERVED2[1];
    volatile uint32_t LTPI_LL_GPIOA_INTR_MSK; //0x30
    volatile uint32_t LTPI_NL_GPIOB_INTR_MSK; //0x34
    volatile uint32_t LTPI_NL_GPIOC_INTR_MSK; //0x38
    volatile uint32_t LTPI_PHY_INTR_MSK; //0x3c
    volatile uint32_t LTPI_LL_GPIOA_INTR_CLR; //0x40
    volatile uint32_t LTPI_NL_GPIOB_INTR_CLR; //0x44
    volatile uint32_t LTPI_NL_GPIOC_INTR_CLR; //0x48
    volatile uint32_t LTPI_PHY_INTR_CLR; //0x4c
    volatile uint32_t LTPI_LL_GPIOA_INTR_STT; //0x50
    volatile uint32_t LTPI_NL_GPIOB_INTR_STT; //0x54
    volatile uint32_t LTPI_NL_GPIOC_INTR_STT; //0x58
    volatile uint32_t LTPI_PHY_INTR_STT; //0x5c
    volatile uint32_t LTPI_LL_GPIOA_INTR_RAW; //0x60
    volatile uint32_t LTPI_NL_GPIOB_INTR_RAW; //0x64
    volatile uint32_t LTPI_NL_GPIOC_INTR_RAW; //0x68
    volatile uint32_t LTPI_PHY_INTR_RAW; //0x6c
    volatile uint32_t LTPI_SCM_PER_EN; //0x70
    volatile uint32_t LTPI_PHY_TEST_CFG; //0x74
    volatile uint32_t LTPI_PHY_CFG; //0x78
    volatile uint32_t LTPI_RXRST_DLY_VAL; //0x7c
    volatile uint32_t LTPI_PHY_TXCTL_CTL0_30M; //0x80
    volatile uint32_t LTPI_PHY_TXCTL_CTL1_30M; //0x84
    volatile uint32_t LTPI_PHY_TXCTL_CTL2_30M; //0x88
    volatile uint32_t LTPI_PHY_TXCTL_CTL3_30M; //0x8c
    volatile uint32_t LTPI_PHY_TXCTL_CTL4_30M; //0x90
    volatile uint32_t LTPI_PHY_TXCTL_CTL5_30M; //0x94
    volatile uint32_t LTPI_PHY_TXCTL_CTL6_30M; //0x98
    volatile uint32_t LTPI_PHY_TXCTL_CTL7_30M; //0x9c
    volatile uint32_t LTPI_PHY_RXCTL_CTL0_30M; //0xa0
    volatile uint32_t LTPI_PHY_RXCTL_CTL1_30M; //0xa4
    volatile uint32_t LTPI_PHY_RXCTL_CTL2_30M; //0xa8
    volatile uint32_t LTPI_PHY_RXCTL_CTL3_30M; //0xac
    volatile uint32_t LTPI_PHY_RXCTL_CTL4_30M; //0xb0
    volatile uint32_t LTPI_PHY_RXCTL_CTL5_30M; //0xb4
    volatile uint32_t RESERVED3[2];
    volatile uint32_t LTPI_PHY_TXCTL_CTL0_50M; //0xc0
    volatile uint32_t LTPI_PHY_TXCTL_CTL1_50M; //0xc4
    volatile uint32_t LTPI_PHY_TXCTL_CTL2_50M; //0xc8
    volatile uint32_t LTPI_PHY_TXCTL_CTL3_50M; //0xcc
    volatile uint32_t LTPI_PHY_TXCTL_CTL4_50M; //0xd0
    volatile uint32_t LTPI_PHY_TXCTL_CTL5_50M; //0xd4
    volatile uint32_t LTPI_PHY_TXCTL_CTL6_50M; //0xd8
    volatile uint32_t LTPI_PHY_TXCTL_CTL7_50M; //0xdc
    volatile uint32_t LTPI_PHY_RXCTL_CTL0_50M; //0xe0
    volatile uint32_t LTPI_PHY_RXCTL_CTL1_50M; //0xe4
    volatile uint32_t LTPI_PHY_RXCTL_CTL2_50M; //0xe8
    volatile uint32_t LTPI_PHY_RXCTL_CTL3_50M; //0xec
    volatile uint32_t LTPI_PHY_RXCTL_CTL4_50M; //0xf0
    volatile uint32_t LTPI_PHY_RXCTL_CTL5_50M; //0xf4
    volatile uint32_t RESERVED4[2];
    volatile uint32_t LTPI_PHY_TXCTL_CTL0_100M; //0x100
    volatile uint32_t LTPI_PHY_TXCTL_CTL1_100M; //0x104
    volatile uint32_t LTPI_PHY_TXCTL_CTL2_100M; //0x108
    volatile uint32_t LTPI_PHY_TXCTL_CTL3_100M; //0x10c
    volatile uint32_t LTPI_PHY_TXCTL_CTL4_100M; //0x110
    volatile uint32_t LTPI_PHY_TXCTL_CTL5_100M; //0x114
    volatile uint32_t LTPI_PHY_TXCTL_CTL6_100M; //0x118
    volatile uint32_t LTPI_PHY_TXCTL_CTL7_100M; //0x11c
    volatile uint32_t LTPI_PHY_RXCTL_CTL0_100M; //0x120
    volatile uint32_t LTPI_PHY_RXCTL_CTL1_100M; //0x124
    volatile uint32_t LTPI_PHY_RXCTL_CTL2_100M; //0x128
    volatile uint32_t LTPI_PHY_RXCTL_CTL3_100M; //0x12c
    volatile uint32_t LTPI_PHY_RXCTL_CTL4_100M; //0x130
    volatile uint32_t LTPI_PHY_RXCTL_CTL5_100M; //0x134
    volatile uint32_t LTPI_PHY_RXDDR_CFG; //0x138
    volatile uint32_t RESERVED5[1];
    volatile uint32_t LTPI_PHY_TXCTL_STT0; //0x140
    volatile uint32_t LTPI_PHY_RXCTL_STT0; //0x144
    volatile uint32_t LTPI_PHY_RXCTL_STT1; //0x148
#endif
}reg_ltpi_phy_t;

enum LTPI_PHY_REG_LTPI_LL_GPIO_LOCK_FIELD
{
    LTPI_PHY_LTPI_LL_GPIO_LOCK_MASK = (int)0xffff,
    LTPI_PHY_LTPI_LL_GPIO_LOCK_POS = 0,
};

enum LTPI_PHY_REG_LTPI_LL_GPIO_DATO_FIELD
{
    LTPI_PHY_LTPI_LL_GPIO_DATO_MASK = (int)0xffff,
    LTPI_PHY_LTPI_LL_GPIO_DATO_POS = 0,
};

enum LTPI_PHY_REG_LTPI_LL_GPIO_DATI_FIELD
{
    LTPI_PHY_LTPI_LL_GPIO_DATI_MASK = (int)0xffff,
    LTPI_PHY_LTPI_LL_GPIO_DATI_POS = 0,
};

enum LTPI_PHY_REG_LTPI_PHY_INTR_MSK_FIELD
{
    LTPI_PHY_LTPI_PHY_INTR_MSK_MASK = (int)0x1,
    LTPI_PHY_LTPI_PHY_INTR_MSK_POS = 0,
};

enum LTPI_PHY_REG_LTPI_PHY_INTR_CLR_FIELD
{
    LTPI_PHY_LTPI_PHY_INTR_CLR_MASK = (int)0x1,
    LTPI_PHY_LTPI_PHY_INTR_CLR_POS = 0,
};

enum LTPI_PHY_REG_LTPI_PHY_INTR_STT_FIELD
{
    LTPI_PHY_LTPI_PHY_INTR_STT_MASK = (int)0x1,
    LTPI_PHY_LTPI_PHY_INTR_STT_POS = 0,
};

enum LTPI_PHY_REG_LTPI_PHY_INTR_RAW_FIELD
{
    LTPI_PHY_LTPI_PHY_INTR_RAW_MASK = (int)0x1,
    LTPI_PHY_LTPI_PHY_INTR_RAW_POS = 0,
};

enum LTPI_PHY_REG_LTPI_SCM_PER_EN_FIELD
{
    LTPI_PHY_LTPI_SCM_I2C_EN_MASK = (int)0x3f,
    LTPI_PHY_LTPI_SCM_I2C_EN_POS = 0,
    LTPI_PHY_LTPI_SCM_UART_EN_MASK = (int)0xc0,
    LTPI_PHY_LTPI_SCM_UART_EN_POS = 6,
};

enum LTPI_PHY_REG_LTPI_PHY_TEST_CFG_FIELD
{
    LTPI_PHY_LTPI_PHY_TEST_SEL_MASK = (int)0x7,
    LTPI_PHY_LTPI_PHY_TEST_SEL_POS = 0,
    LTPI_PHY_LTPI_PHY_TEST_EN_MASK = (int)0x8,
    LTPI_PHY_LTPI_PHY_TEST_EN_POS = 3,
    LTPI_PHY_LTPI_PHY_TEST_TXDIV_MASK = (int)0x70,
    LTPI_PHY_LTPI_PHY_TEST_TXDIV_POS = 4,
    LTPI_PHY_LTPI_PHY_TEST_TXRSTN_MASK = (int)0x80,
    LTPI_PHY_LTPI_PHY_TEST_TXRSTN_POS = 7,
    LTPI_PHY_LTPI_PHY_TEST_RXDIV_MASK = (int)0x700,
    LTPI_PHY_LTPI_PHY_TEST_RXDIV_POS = 8,
    LTPI_PHY_LTPI_PHY_TEST_RXRSTN_MASK = (int)0x800,
    LTPI_PHY_LTPI_PHY_TEST_RXRSTN_POS = 11,
};

enum LTPI_PHY_REG_LTPI_PHY_CFG_FIELD
{
    LTPI_PHY_LTPI_PHY_LOCK_CNT_MASK = (int)0x3ffff,
    LTPI_PHY_LTPI_PHY_LOCK_CNT_POS = 0,
    LTPI_PHY_LTPI_PHY_SCM_SEL_MASK = (int)0x40000,
    LTPI_PHY_LTPI_PHY_SCM_SEL_POS = 18,
    LTPI_PHY_LTPI_SCM_RXCLK_BYP_MASK = (int)0x100000,
    LTPI_PHY_LTPI_SCM_RXCLK_BYP_POS = 20,
    LTPI_PHY_LTPI_HPM_RXCLK_BYP_MASK = (int)0x200000,
    LTPI_PHY_LTPI_HPM_RXCLK_BYP_POS = 21,
    LTPI_PHY_LTPI_PHY_TXCLK_INV_MASK = (int)0x400000,
    LTPI_PHY_LTPI_PHY_TXCLK_INV_POS = 22,
    LTPI_PHY_LTPI_PHY_RXCLK_INV_MASK = (int)0x800000,
    LTPI_PHY_LTPI_PHY_RXCLK_INV_POS = 23,
};

enum LTPI_PHY_REG_LTPI_RXRST_DLY_VAL_FIELD
{
    LTPI_PHY_LTPI_RXRST_DLY_VAL_MASK = (int)0xffff0000,
    LTPI_PHY_LTPI_RXRST_DLY_VAL_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL0_FIELD
{
    LTPI_PHY_LVDS_EN_TX_MASK = (int)0x1,
    LTPI_PHY_LVDS_EN_TX_POS = 0,
    LTPI_PHY_PLL_REG_VTRIM_CTL0_MASK = (int)0x6,
    LTPI_PHY_PLL_REG_VTRIM_CTL0_POS = 1,
    LTPI_PHY_LVDS_VTRIM_MASK = (int)0xf8,
    LTPI_PHY_LVDS_VTRIM_POS = 3,
    LTPI_PHY_EN_LVDS_TEST_MASK = (int)0x100,
    LTPI_PHY_EN_LVDS_TEST_POS = 8,
    LTPI_PHY_PRBS_CLK_SEL_MASK = (int)0x200,
    LTPI_PHY_PRBS_CLK_SEL_POS = 9,
    LTPI_PHY_PRBS_TEST_MODE_MASK = (int)0xc00,
    LTPI_PHY_PRBS_TEST_MODE_POS = 10,
    LTPI_PHY_PRBS_DECT_EN_TX_MASK = (int)0x1000,
    LTPI_PHY_PRBS_DECT_EN_TX_POS = 12,
    LTPI_PHY_PRBS_GEN_EN_TX_MASK = (int)0x2000,
    LTPI_PHY_PRBS_GEN_EN_TX_POS = 13,
    LTPI_PHY_PRBS_DECT_RSTN_MASK = (int)0x4000,
    LTPI_PHY_PRBS_DECT_RSTN_POS = 14,
    LTPI_PHY_PRBS_GEN_RSTN_MASK = (int)0x8000,
    LTPI_PHY_PRBS_GEN_RSTN_POS = 15,
    LTPI_PHY_TX0_DATA_REG_CTL0_MASK = (int)0x7f0000,
    LTPI_PHY_TX0_DATA_REG_CTL0_POS = 16,
    LTPI_PHY_MSB_LSB_EXCHANGE_TX_MASK = (int)0x800000,
    LTPI_PHY_MSB_LSB_EXCHANGE_TX_POS = 23,
    LTPI_PHY_TX1_DATA_REG_CTL0_MASK = (int)0x7f000000,
    LTPI_PHY_TX1_DATA_REG_CTL0_POS = 24,
    LTPI_PHY_TXPN_PIN_EXCHANGE0_MASK = (int)0x80000000,
    LTPI_PHY_TXPN_PIN_EXCHANGE0_POS = 31,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL1_FIELD
{
    LTPI_PHY_R50_SEL_TX_MASK = (int)0x7,
    LTPI_PHY_R50_SEL_TX_POS = 0,
    LTPI_PHY_TX_DDR_CLK_EN_MASK = (int)0x8,
    LTPI_PHY_TX_DDR_CLK_EN_POS = 3,
    LTPI_PHY_TX1_DATA_REG_CTL1_MASK = (int)0x70,
    LTPI_PHY_TX1_DATA_REG_CTL1_POS = 4,
    LTPI_PHY_TXPN_PIN_EXCHANGE1_MASK = (int)0x80,
    LTPI_PHY_TXPN_PIN_EXCHANGE1_POS = 7,
    LTPI_PHY_PLL_PRE_DIV_TX_MASK = (int)0xff00,
    LTPI_PHY_PLL_PRE_DIV_TX_POS = 8,
    LTPI_PHY_NTRIM_MASK = (int)0x70000,
    LTPI_PHY_NTRIM_POS = 16,
    LTPI_PHY_U25M_EN_MASK = (int)0x80000,
    LTPI_PHY_U25M_EN_POS = 19,
    LTPI_PHY_CP_EN_FB_TX_MASK = (int)0x100000,
    LTPI_PHY_CP_EN_FB_TX_POS = 20,
    LTPI_PHY_PLL_REG_VTRIM_CTL1_MASK = (int)0x200000,
    LTPI_PHY_PLL_REG_VTRIM_CTL1_POS = 21,
    LTPI_PHY_CLK_SEL_TX_MASK = (int)0x400000,
    LTPI_PHY_CLK_SEL_TX_POS = 22,
    LTPI_PHY_EN_PLL_TX_MASK = (int)0x800000,
    LTPI_PHY_EN_PLL_TX_POS = 23,
    LTPI_PHY_FB_N_INT_TX_MASK = (int)0x3f000000,
    LTPI_PHY_FB_N_INT_TX_POS = 24,
    LTPI_PHY_PFD_DLY_MASK = (int)0xc0000000,
    LTPI_PHY_PFD_DLY_POS = 30,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL2_FIELD
{
    LTPI_PHY_PLL_KVCO_TX_MASK = (int)0x3,
    LTPI_PHY_PLL_KVCO_TX_POS = 0,
    LTPI_PHY_PLL_ICHP_TX_MASK = (int)0xc,
    LTPI_PHY_PLL_ICHP_TX_POS = 2,
    LTPI_PHY_PLL_LPF_RS_TX_MASK = (int)0x70,
    LTPI_PHY_PLL_LPF_RS_TX_POS = 4,
    LTPI_PHY_PLL_VCO_OFS_SEL_TX_MASK = (int)0x80,
    LTPI_PHY_PLL_VCO_OFS_SEL_TX_POS = 7,
    LTPI_PHY_PLL_OFS_TX_MASK = (int)0x3f00,
    LTPI_PHY_PLL_OFS_TX_POS = 8,
    LTPI_PHY_PLL_AUTO_OFS_TX_MASK = (int)0x4000,
    LTPI_PHY_PLL_AUTO_OFS_TX_POS = 14,
    LTPI_PHY_PLL_EN_DETECT_TX_MASK = (int)0x8000,
    LTPI_PHY_PLL_EN_DETECT_TX_POS = 15,
    LTPI_PHY_PLL_AFOS_DIV_TX_MASK = (int)0x3f0000,
    LTPI_PHY_PLL_AFOS_DIV_TX_POS = 16,
    LTPI_PHY_PLL_AOFS_MODE_TX_MASK = (int)0xc00000,
    LTPI_PHY_PLL_AOFS_MODE_TX_POS = 22,
    LTPI_PHY_PLL_SDM_EN_TX_MASK = (int)0x1000000,
    LTPI_PHY_PLL_SDM_EN_TX_POS = 24,
    LTPI_PHY_PLL_DITHER_EN_TX_MASK = (int)0x2000000,
    LTPI_PHY_PLL_DITHER_EN_TX_POS = 25,
    LTPI_PHY_PLL_SSC_EN_TX_MASK = (int)0xc000000,
    LTPI_PHY_PLL_SSC_EN_TX_POS = 26,
    LTPI_PHY_PLL_FB_DELAY_TX_MASK = (int)0x30000000,
    LTPI_PHY_PLL_FB_DELAY_TX_POS = 28,
    LTPI_PHY_PLL_REF_DELAY_TX_MASK = (int)0xc0000000,
    LTPI_PHY_PLL_REF_DELAY_TX_POS = 30,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL3_FIELD
{
    LTPI_PHY_PLL_FRACN_MASK = (int)0xffff,
    LTPI_PHY_PLL_FRACN_POS = 0,
    LTPI_PHY_SSC_FREQ_MASK = (int)0xffff0000,
    LTPI_PHY_SSC_FREQ_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL4_FIELD
{
    LTPI_PHY_SSC_STEP_B_MASK = (int)0xffffff,
    LTPI_PHY_SSC_STEP_B_POS = 0,
    LTPI_PHY_SSC_STEP_D0_MASK = (int)0xff000000,
    LTPI_PHY_SSC_STEP_D0_POS = 24,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL5_FIELD
{
    LTPI_PHY_SSC_STEP_D1_MASK = (int)0xff,
    LTPI_PHY_SSC_STEP_D1_POS = 0,
    LTPI_PHY_SSC_STEP_F_MASK = (int)0xffffff00,
    LTPI_PHY_SSC_STEP_F_POS = 8,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL6_FIELD
{
    LTPI_PHY_EN_PLL_TEST_TX_MASK = (int)0x1,
    LTPI_PHY_EN_PLL_TEST_TX_POS = 0,
    LTPI_PHY_PLL_TEST_SEL_TX_MASK = (int)0x2,
    LTPI_PHY_PLL_TEST_SEL_TX_POS = 1,
    LTPI_PHY_PLL_EN_TEST_DIV_TX_MASK = (int)0x4,
    LTPI_PHY_PLL_EN_TEST_DIV_TX_POS = 2,
    LTPI_PHY_PLL_CLK_BYPASS_TX_MASK = (int)0x8,
    LTPI_PHY_PLL_CLK_BYPASS_TX_POS = 3,
    LTPI_PHY_SSC_GAIN_MASK = (int)0x70,
    LTPI_PHY_SSC_GAIN_POS = 4,
    LTPI_PHY_PLL_LOCK_EN_TX_MASK = (int)0x80,
    LTPI_PHY_PLL_LOCK_EN_TX_POS = 7,
    LTPI_PHY_PLL_LOCK_REF_THD_TX_MASK = (int)0xffff00,
    LTPI_PHY_PLL_LOCK_REF_THD_TX_POS = 8,
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_0_MASK = (int)0xff000000,
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_0_POS = 24,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_CTL7_FIELD
{
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_1_MASK = (int)0x3,
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_1_POS = 0,
    LTPI_PHY_TEST_SEL_TX_MASK = (int)0xc,
    LTPI_PHY_TEST_SEL_TX_POS = 2,
    LTPI_PHY_EN_TEST_TX_MASK = (int)0x10,
    LTPI_PHY_EN_TEST_TX_POS = 4,
    LTPI_PHY_TX0_DATA_REG_CTL7_MASK = (int)0xe0,
    LTPI_PHY_TX0_DATA_REG_CTL7_POS = 5,
    LTPI_PHY_PLL_CP_ADJ_TX_MASK = (int)0xf00,
    LTPI_PHY_PLL_CP_ADJ_TX_POS = 8,
    LTPI_PHY_PLL_CP_OFST_EN_TX_MASK = (int)0x1000,
    LTPI_PHY_PLL_CP_OFST_EN_TX_POS = 12,
    LTPI_PHY_PLL_LOCK_DIGTAL_MASK = (int)0x2000,
    LTPI_PHY_PLL_LOCK_DIGTAL_POS = 13,
    LTPI_PHY_PLL_LOCK_SEL_MASK = (int)0x4000,
    LTPI_PHY_PLL_LOCK_SEL_POS = 14,
    LTPI_PHY_NC_MASK = (int)0x8000,
    LTPI_PHY_NC_POS = 15,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL0_FIELD
{
    LTPI_PHY_LVDS_EN_RX_MASK = (int)0x1,
    LTPI_PHY_LVDS_EN_RX_POS = 0,
    LTPI_PHY_ITRIM_MASK = (int)0x6,
    LTPI_PHY_ITRIM_POS = 1,
    LTPI_PHY_R50_SEL_RX_MASK = (int)0x38,
    LTPI_PHY_R50_SEL_RX_POS = 3,
    LTPI_PHY_EN_V09CAP_MASK = (int)0x40,
    LTPI_PHY_EN_V09CAP_POS = 6,
    LTPI_PHY_NC1_MASK = (int)0x80,
    LTPI_PHY_NC1_POS = 7,
    LTPI_PHY_RX_CH_SEL_MASK = (int)0x100,
    LTPI_PHY_RX_CH_SEL_POS = 8,
    LTPI_PHY_PRBS_DET_CKSEL_MASK = (int)0x200,
    LTPI_PHY_PRBS_DET_CKSEL_POS = 9,
    LTPI_PHY_RSTN_ERR_FLAG_MASK = (int)0x400,
    LTPI_PHY_RSTN_ERR_FLAG_POS = 10,
    LTPI_PHY_NC2_MASK = (int)0x800,
    LTPI_PHY_NC2_POS = 11,
    LTPI_PHY_PRBS_DECT_EN_RX_MASK = (int)0x1000,
    LTPI_PHY_PRBS_DECT_EN_RX_POS = 12,
    LTPI_PHY_PRBS_GEN_EN_RX_MASK = (int)0x2000,
    LTPI_PHY_PRBS_GEN_EN_RX_POS = 13,
    LTPI_PHY_RSTN_PRBS_DECT_MASK = (int)0x4000,
    LTPI_PHY_RSTN_PRBS_DECT_POS = 14,
    LTPI_PHY_RSTN_PRBS_GEN_MASK = (int)0x8000,
    LTPI_PHY_RSTN_PRBS_GEN_POS = 15,
    LTPI_PHY_PHY0_CAL_MASK = (int)0x1f0000,
    LTPI_PHY_PHY0_CAL_POS = 16,
    LTPI_PHY_PHY0_ITRIM_MASK = (int)0x600000,
    LTPI_PHY_PHY0_ITRIM_POS = 21,
    LTPI_PHY_EN_CAL_MASK = (int)0x800000,
    LTPI_PHY_EN_CAL_POS = 23,
    LTPI_PHY_CAL_PHY1_MASK = (int)0x1f000000,
    LTPI_PHY_CAL_PHY1_POS = 24,
    LTPI_PHY_ITRIM_PHY1_MASK = (int)0x60000000,
    LTPI_PHY_ITRIM_PHY1_POS = 29,
    LTPI_PHY_MSB_LSB_EXCHANGE_RX_MASK = (int)0x80000000,
    LTPI_PHY_MSB_LSB_EXCHANGE_RX_POS = 31,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL1_FIELD
{
    LTPI_PHY_EN_VCOM_MASK = (int)0x1,
    LTPI_PHY_EN_VCOM_POS = 0,
    LTPI_PHY_EN_EXTCAP_MASK = (int)0x2,
    LTPI_PHY_EN_EXTCAP_POS = 1,
    LTPI_PHY_VCOM_VSEL_MASK = (int)0xc,
    LTPI_PHY_VCOM_VSEL_POS = 2,
    LTPI_PHY_NC1_RXCTL1_MASK = (int)0x30,
    LTPI_PHY_NC1_RXCTL1_POS = 4,
    LTPI_PHY_RXPN_PIN_EXCHANGE1_MASK = (int)0x40,
    LTPI_PHY_RXPN_PIN_EXCHANGE1_POS = 6,
    LTPI_PHY_RXPN_PIN_EXCHANGE0_MASK = (int)0x80,
    LTPI_PHY_RXPN_PIN_EXCHANGE0_POS = 7,
    LTPI_PHY_CLKO_INV_MASK = (int)0x100,
    LTPI_PHY_CLKO_INV_POS = 8,
    LTPI_PHY_NC2_RXCTL1_MASK = (int)0x200,
    LTPI_PHY_NC2_RXCTL1_POS = 9,
    LTPI_PHY_EN_25M_MASK = (int)0x400,
    LTPI_PHY_EN_25M_POS = 10,
    LTPI_PHY_CP_EN_FB_RX_MASK = (int)0x800,
    LTPI_PHY_CP_EN_FB_RX_POS = 11,
    LTPI_PHY_NC3_MASK = (int)0xf000,
    LTPI_PHY_NC3_POS = 12,
    LTPI_PHY_FB_N_INT_RX_MASK = (int)0x3f0000,
    LTPI_PHY_FB_N_INT_RX_POS = 16,
    LTPI_PHY_CLK_SEL_RX_MASK = (int)0x400000,
    LTPI_PHY_CLK_SEL_RX_POS = 22,
    LTPI_PHY_EN_PLL_RX_MASK = (int)0x800000,
    LTPI_PHY_EN_PLL_RX_POS = 23,
    LTPI_PHY_PLL_PRE_DIV_RX_MASK = (int)0xff000000,
    LTPI_PHY_PLL_PRE_DIV_RX_POS = 24,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL2_FIELD
{
    LTPI_PHY_PLL_KVCO_RX_MASK = (int)0x3,
    LTPI_PHY_PLL_KVCO_RX_POS = 0,
    LTPI_PHY_PLL_ICHP_RX_MASK = (int)0xc,
    LTPI_PHY_PLL_ICHP_RX_POS = 2,
    LTPI_PHY_PLL_LPF_RS_RX_MASK = (int)0x70,
    LTPI_PHY_PLL_LPF_RS_RX_POS = 4,
    LTPI_PHY_PLL_VCO_OFS_SEL_RX_MASK = (int)0x80,
    LTPI_PHY_PLL_VCO_OFS_SEL_RX_POS = 7,
    LTPI_PHY_PLL_OFS_RX_MASK = (int)0x3f00,
    LTPI_PHY_PLL_OFS_RX_POS = 8,
    LTPI_PHY_PLL_AUTO_OFS_RX_MASK = (int)0x4000,
    LTPI_PHY_PLL_AUTO_OFS_RX_POS = 14,
    LTPI_PHY_PLL_EN_DETECT_RX_MASK = (int)0x8000,
    LTPI_PHY_PLL_EN_DETECT_RX_POS = 15,
    LTPI_PHY_PLL_AOFS_DIV_RX_MASK = (int)0x3f0000,
    LTPI_PHY_PLL_AOFS_DIV_RX_POS = 16,
    LTPI_PHY_PLL_AUTO_MODE_RX_MASK = (int)0xc00000,
    LTPI_PHY_PLL_AUTO_MODE_RX_POS = 22,
    LTPI_PHY_NC_RXCTL2_RX_MASK = (int)0x1000000,
    LTPI_PHY_NC_RXCTL2_RX_POS = 24,
    LTPI_PHY_PLL_PFD_DLY_RX_MASK = (int)0x6000000,
    LTPI_PHY_PLL_PFD_DLY_RX_POS = 25,
    LTPI_PHY_PLL_CLK_BYPASS_RX_MASK = (int)0x8000000,
    LTPI_PHY_PLL_CLK_BYPASS_RX_POS = 27,
    LTPI_PHY_PLL_FB_DELAY_RX_MASK = (int)0x30000000,
    LTPI_PHY_PLL_FB_DELAY_RX_POS = 28,
    LTPI_PHY_PLL_REF_DELAY_RX_MASK = (int)0xc0000000,
    LTPI_PHY_PLL_REF_DELAY_RX_POS = 30,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL3_FIELD
{
    LTPI_PHY_NC_RXCTL3_MASK = (int)0xffff,
    LTPI_PHY_NC_RXCTL3_POS = 0,
    LTPI_PHY_PLL_LOCK_REF_THD_RX_MASK = (int)0xffff0000,
    LTPI_PHY_PLL_LOCK_REF_THD_RX_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL4_FIELD
{
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_MASK = (int)0x3ff,
    LTPI_PHY_PLL_LOCK_REF_ERR_THD_POS = 0,
    LTPI_PHY_PLL_CP_OFST_EN_RX_MASK = (int)0x400,
    LTPI_PHY_PLL_CP_OFST_EN_RX_POS = 10,
    LTPI_PHY_NC_RXCTL4_MASK = (int)0x800,
    LTPI_PHY_NC_RXCTL4_POS = 11,
    LTPI_PHY_EN_PLL_TEST_RX_MASK = (int)0x1000,
    LTPI_PHY_EN_PLL_TEST_RX_POS = 12,
    LTPI_PHY_PLL_TEST_SEL_RX_MASK = (int)0x2000,
    LTPI_PHY_PLL_TEST_SEL_RX_POS = 13,
    LTPI_PHY_PLL_EN_TEST_DIV_RX_MASK = (int)0x4000,
    LTPI_PHY_PLL_EN_TEST_DIV_RX_POS = 14,
    LTPI_PHY_PLL_LOCK_EN_RX_MASK = (int)0x8000,
    LTPI_PHY_PLL_LOCK_EN_RX_POS = 15,
    LTPI_PHY_EN_TEST_RX_MASK = (int)0x10000,
    LTPI_PHY_EN_TEST_RX_POS = 16,
    LTPI_PHY_TEST_SEL_RX_MASK = (int)0xe0000,
    LTPI_PHY_TEST_SEL_RX_POS = 17,
    LTPI_PHY_PLL_CP_ADJ_RX_MASK = (int)0xf00000,
    LTPI_PHY_PLL_CP_ADJ_RX_POS = 20,
    LTPI_PHY_PH_LOCATION_REG_CTL4_MASK = (int)0xff000000,
    LTPI_PHY_PH_LOCATION_REG_CTL4_POS = 24,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_CTL5_FIELD
{
    LTPI_PHY_PH_LOCATION_REG_CTL5_MASK = (int)0x3,
    LTPI_PHY_PH_LOCATION_REG_CTL5_POS = 0,
    LTPI_PHY_PH_LO_SEL_MASK = (int)0x4,
    LTPI_PHY_PH_LO_SEL_POS = 2,
    LTPI_PHY_PLL_REG_VTRIM_RX_MASK = (int)0x38,
    LTPI_PHY_PLL_REG_VTRIM_RX_POS = 3,
    LTPI_PHY_NC_RXCTL5_MASK = (int)0xc0,
    LTPI_PHY_NC_RXCTL5_POS = 6,
};

enum LTPI_PHY_REG_LTPI_PHY_RXDDR_CFG_FIELD
{
    LTPI_PHY_PLL_PRE_DIV_30M_MASK = (int)0xff,
    LTPI_PHY_PLL_PRE_DIV_30M_POS = 0,
    LTPI_PHY_PLL_PRE_DIV_50M_MASK = (int)0xff00,
    LTPI_PHY_PLL_PRE_DIV_50M_POS = 8,
    LTPI_PHY_PLL_PRE_DIV_100M_MASK = (int)0xff0000,
    LTPI_PHY_PLL_PRE_DIV_100M_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_TXCTL_STT0_FIELD
{
    LTPI_PHY_DEMUX_DATA_TX_MASK = (int)0x3ff,
    LTPI_PHY_DEMUX_DATA_TX_POS = 0,
    LTPI_PHY_DEMUX_CLK_TX_MASK = (int)0x400,
    LTPI_PHY_DEMUX_CLK_TX_POS = 10,
    LTPI_PHY_AOFS_DONE_TX_MASK = (int)0x800,
    LTPI_PHY_AOFS_DONE_TX_POS = 11,
    LTPI_PHY_LOCK_FREQ_DIF_TX_MASK = (int)0x1ff0000,
    LTPI_PHY_LOCK_FREQ_DIF_TX_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_STT0_FIELD
{
    LTPI_PHY_DEMUX_DATA_RX_MASK = (int)0x3ff,
    LTPI_PHY_DEMUX_DATA_RX_POS = 0,
    LTPI_PHY_DEMUX_CLK_RX_MASK = (int)0x400,
    LTPI_PHY_DEMUX_CLK_RX_POS = 10,
    LTPI_PHY_AOFS_DONE_RX_MASK = (int)0x800,
    LTPI_PHY_AOFS_DONE_RX_POS = 11,
    LTPI_PHY_LOCK_FREQ_DIF_RX_MASK = (int)0x1ff0000,
    LTPI_PHY_LOCK_FREQ_DIF_RX_POS = 16,
};

enum LTPI_PHY_REG_LTPI_PHY_RXCTL_STT1_FIELD
{
    LTPI_PHY_BER_RX_MASK = (int)0x3ff,
    LTPI_PHY_BER_RX_POS = 0,
    LTPI_PHY_CAL_FLAG_RX_MASK = (int)0x400,
    LTPI_PHY_CAL_FLAG_RX_POS = 10,
    LTPI_PHY_PH_DET_ERR_COUNT_RX_MASK = (int)0xff0000,
    LTPI_PHY_PH_DET_ERR_COUNT_RX_POS = 16,
};

#endif