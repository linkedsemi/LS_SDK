import os
import sys
Import('env')
env['CPU'] = 'cortex-m0'
env['LLVM_CFG'] = 'armv6m_soft_nofp_nosys.cfg'
if not 'DEFAULT_OPT_LVL' in env:
    env['DEFAULT_OPT_LVL'] = '-Os'
def plf_postaction(self,target):
    if 'progen' in self['TOOLS']:
        return
    self.AddPostAction(target,Action('$OBJDUMP -d -z -x $TARGET > ${TARGET.base}.asm'))
    target_path = str(target[0]).replace('.elf','')
    app_hex = self.Command(target_path+'.hex',target[0],Action('$OBJCOPY -O ihex $SOURCES $TARGET'))
    self.AddPostAction(target[0],Action('$OBJCOPY -O binary $TARGET ${TARGET.base}.ota.bin'))
    info_sbl_hex = self.Command('build/le501x/info_sbl.hex',self.subst('$SDK_ROOT/soc/arm_cm/le501x/bin/bram.bin'),Action(self.subst('python $SDK_ROOT/tools/le501x/info_sbl_merge.py') + ' $SOURCE $APP_IMAGE_BASE $TARGET'))
    if self.get('STACK_HEX') is None:
        production_hex_depends = [info_sbl_hex,app_hex]
    else:
        production_hex_depends = [info_sbl_hex,app_hex,self['STACK_HEX']]
    self.Command(target_path+'_production.hex',production_hex_depends, Action(self.subst('python $SDK_ROOT/tools/hexmerge.py') + ' $SOURCES > $TARGET'))



def plf_build(self,name,app_src,rtos,with_startup,ble,mesh,objprefix):
    start_src = []
    if with_startup:
        start_src = ['$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/startup.S']
    sdk_src = []
    sdk_src += list(map(lambda x:os.path.join('$SDK_ROOT/soc/',x),[
        'arm_cm/svcall.c',
        'arm_cm/systick.c',
        'arm_cm/swint_handler.c',
        'arm_cm/le501x/cpu.c',
        'arm_cm/le501x/platform.c',
        'arm_cm/le501x/stack_var.c',
        'arm_cm/le501x/compiler/$COMPILER/stack_asm.S',
        'arm_cm/le501x/compiler/$COMPILER/sleep_asm.S',
        'arm_cm/le501x/compiler/$COMPILER/svcall_asm.S',
        'arm_cm/le501x/compiler/$COMPILER/delay_asm.S',
        'arm_cm/le501x/integration/ls_msp_qspi.c',
        'arm_cm/le501x/integration/ls_msp_uart.c',
        'arm_cm/le501x/integration/ls_msp_spi_i2s.c',
        'arm_cm/le501x/integration/ls_msp_adc.c',
        'arm_cm/le501x/integration/ls_msp_i2c.c',
        'arm_cm/le501x/integration/modem_rf_le501x.c',
        'arm_cm/le501x/integration/modem_rf_le501x_24g.c',
        'arm_cm/le501x/integration/calc_acc.c',
        'arm_cm/le501x/integration/ls_msp_cache.c',
        'arm_cm/le501x/integration/ls_soc_gpio.c',
        'arm_cm/le501x/integration/ls_msp_dmac.c',
        'arm_cm/le501x/integration/ls_msp_pdm.c',
        'arm_cm/le501x/integration/ls_msp_iwdg.c',
        'arm_cm/le501x/integration/ls_msp_wwdg.c',
        'arm_cm/le501x/integration/ls_msp_rtc.c',
        'arm_cm/le501x/integration/ls_msp_timer.c',
        'arm_cm/le501x/integration/ls_msp_ssi.c',
        'arm_cm/le501x/integration/ls_msp_trng.c',
        'arm_cm/le501x/integration/ls_msp_pis.c',
        'arm_cm/le501x/integration/ls_msp_crypt.c',
        'arm_cm/le501x/integration/ls_msp_ecc.c',
        'arm_cm/le501x/sleep.c',
        'arm_cm/le501x/sys_stat.c',
        'arm_cm/le501x/sw_timer_port.c',
    ]))
    sdk_src += list(map(lambda x:os.path.join('$SDK_ROOT/hal_driver/',x),[
        'src/ls_hal_flash_svcall.c',
        'src/ls_hal_adc_dma.c',
        'src/calc_div.c',
        'src/ls_hal_dmac.c',
        'src/ls_hal_adc.c',
        'src/ls_hal_cache.c',
        'src/ls_hal_crypt.c',
        'src/ls_hal_i2c.c',
        'src/ls_hal_i2c_dma.c',
        'src/ls_hal_iwdg.c',
        'src/ls_hal_wwdg.c',
        'src/ls_hal_pdm_dma.c',
        'src/ls_hal_pdm.c',
        'src/ls_hal_pis.c',
        'src/ls_hal_qspi.c',
        'src/ls_hal_rtc.c',
        'src/ls_hal_spi_i2s_dma.c',
        'src/ls_hal_spi_i2s.c',
        'src/ls_hal_ssi_dma.c',
        'src/ls_hal_ssi.c',
        'src/ls_hal_timer.c',
        'src/ls_hal_trng.c',
        'src/ls_hal_flash.c',
        'src/ls_hal_flash_qspi.c',
        'src/ls_hal_uart_dma.c',
        'src/ls_hal_uart.c',
        'src/ls_hal_ecc.c',
    ]))
    sdk_src += list(map(lambda x:os.path.join('$SDK_ROOT/module/',x),[
        'common/common.c',
        'common/circular_doubly_linked_list.c',
        #'common/linked_async_framework.c',
        #'common/async_call.c',
        'common/sw_timer.c',
        #'calendar/calendar.c',
        'crc/crc16.c',
        'debug/log.c',
        'debug/ls_dbg.c',
        'debug/RTT/SEGGER_RTT.c',
        'static_buffer/linked_buffer.c',
        'static_buffer/fifo.c',
        'tinyfs/tinyfs_nvm.c',
        'tinyfs/tinyfs_write_cache.c',
        'tinyfs/tinyfs.c',
        'tinycrypt/lib/source/sha256.c',
        'tinycrypt/lib/source/utils.c',
        #'adpcm/adpcm.c',
        #'micro-ecc/uECC.c',
        'ble/ble_common_api.c',
        'settings/inflash_settings.c',
        'settings/ota_settings.c',
    ]))
    inc_list = list(map(lambda x:os.path.join('$SDK_ROOT/',x),['hal_driver/inc',
        'hal_driver/api',
        'module/common',
        #'module/calendar',
        'module/crc',
        'module/debug',
        'module/debug/RTT',
        'module/static_buffer',
        'module/tinyfs',
        'module/tinycrypt/lib/include',
        #'module/micro-ecc',
        #'module/adpcm',
        'module/ble',
        'module/ble/prf',
        'module/settings',
        'soc',
        'soc/arm_cm',
        'soc/arm_cm/cmsis',
        'soc/arm_cm/le501x',
        'soc/arm_cm/le501x/integration',
    ]))
    rtos_src = []
    if not rtos is None:
        rtos_src = list(map(lambda x:os.path.join('$SDK_ROOT/rtos/freertos/',x),[
            'croutine.c',
            'event_groups.c',
            'list.c',
            'queue.c',
            'stream_buffer.c',
            'tasks.c',
            'timers.c',
            'heap_4.c',
        ]))
        if ble:
            rtos_adapt = 'arm_cm/le501x/freertos_adapt_ble.c'
        else:
            rtos_adapt = 'arm_cm/le501x/freertos_adapt_mcu.c'
        rtos_src += list(map(lambda x:os.path.join('$SDK_ROOT/soc/',x),[
            'arm_cm/le501x/compiler/$COMPILER/port.c',
            'arm_cm/le501x/compiler/$COMPILER/portasm.S',
            rtos_adapt,
        ]))
        inc_list += ['$SDK_ROOT/rtos/freertos/include']
    if self.get('STACK_LIB') is None:
        if mesh:
            self['STACK_LIB'] = File(self.subst('$SDK_ROOT/soc/arm_cm/le501x/bin/libmesh.o'))
        elif ble:
            self['STACK_LIB'] = File(self.subst('$SDK_ROOT/soc/arm_cm/le501x/bin/libfw.o'))
    if not self.get('STACK_LIB') is None:
        self.Append(LIBS = [self['STACK_LIB']])
    if self.get('STACK_HEX') is None:
        if mesh:
            self['STACK_HEX'] = File(self.subst('$SDK_ROOT/soc/arm_cm/le501x/bin/fw_with_sig_mesh.hex'))
        elif ble:
            self['STACK_HEX'] = File(self.subst('$SDK_ROOT/soc/arm_cm/le501x/bin/fw.hex'))
    if self.get('APP_IMAGE_BASE') is None:
        if mesh:
            self['APP_IMAGE_BASE'] = 0x18056000
        elif ble:
            self['APP_IMAGE_BASE'] = 0x18034000
        else:
            self['APP_IMAGE_BASE'] = 0x18002000
    if self.get('LINKSCRIPT') is None:
        if mesh:
            self['LINKSCRIPT'] = File(self.subst("$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/mesh.ld"))
        elif ble:
            self['LINKSCRIPT'] = File(self.subst("$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/ble.ld"))
        else:
            self['LINKSCRIPT'] = File(self.subst("$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/mcu.ld"))
    self.Append(LIBPATH = [self.subst("$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/")])
    self.Append(CPPPATH = self.inc_dirs(inc_list))
    target = self.Program('build/le501x/'+name,self.variant_dir_source(sdk_src + start_src + app_src + rtos_src),OBJPREFIX = objprefix)
    self.Depends(target,[self['LINKSCRIPT'],self.subst("$SDK_ROOT/soc/arm_cm/le501x/compiler/$COMPILER/common.ld")])
    return target

env.AddMethod(plf_postaction)
env.AddMethod(plf_build)

