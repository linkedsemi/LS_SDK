#ifndef REG_RWMAC_TYPE_H_
#define REG_RWMAC_TYPE_H_
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct
{
    volatile uint32_t RWBLECNTL; //0x0
    volatile uint32_t VERSION; //0x4
    volatile uint32_t RWBLECONF; //0x8
    volatile uint32_t INTCNTL0; //0xc
    volatile uint32_t INTSTAT0; //0x10
    volatile uint32_t INTACK0; //0x14
    volatile uint32_t INTCNTL1; //0x18
    volatile uint32_t INTSTAT1; //0x1c
    volatile uint32_t INTACK1; //0x20
    volatile uint32_t ACTFIFOSTAT; //0x24
    volatile uint32_t CURRENTRXDESCPTR; //0x28
    volatile uint32_t ETPTR; //0x2c
    volatile uint32_t DEEPSLCNTL; //0x30
    volatile uint32_t DEEPSLWKUP; //0x34
    volatile uint32_t DEEPSLSTAT; //0x38
    volatile uint32_t ENBPRESET; //0x3c
    volatile uint32_t FINECNTCORR; //0x40
    volatile uint32_t CLKNCNTCORR; //0x44
    volatile uint32_t RESERVED0[2];
    volatile uint32_t DIAGCNTL; //0x50
    volatile uint32_t DIAGSTAT; //0x54
    volatile uint32_t DEBUGADDMAX; //0x58
    volatile uint32_t DEBUGADDMIN; //0x5c
    volatile uint32_t ERRORTYPESTAT; //0x60
    volatile uint32_t SWPROFILING; //0x64
    volatile uint32_t RESERVED1[2];
    volatile uint32_t RADIOCNTL0; //0x70
    volatile uint32_t RADIOCNTL1; //0x74
    volatile uint32_t RADIOCNTL2; //0x78
    volatile uint32_t RADIOCNTL3; //0x7c
    volatile uint32_t RADIOPWRUPDN0; //0x80
    volatile uint32_t RADIOPWRUPDN1; //0x84
    volatile uint32_t RADIOPWRUPDN2; //0x88
    volatile uint32_t RADIOPWRUPDN3; //0x8c
    volatile uint32_t RADIOTXRXTIM0; //0x90
    volatile uint32_t RADIOTXRXTIM1; //0x94
    volatile uint32_t RADIOTXRXTIM2; //0x98
    volatile uint32_t RADIOTXRXTIM3; //0x9c
    volatile uint32_t SPIPTRCNTL0; //0xa0
    volatile uint32_t SPIPTRCNTL1; //0xa4
    volatile uint32_t SPIPTRCNTL2; //0xa8
    volatile uint32_t SPIPTRCNTL3; //0xac
    volatile uint32_t AESCNTL; //0xb0
    volatile uint32_t AESKEY31_0; //0xb4
    volatile uint32_t AESKEY63_32; //0xb8
    volatile uint32_t AESKEY95_64; //0xbc
    volatile uint32_t AESKEY127_96; //0xc0
    volatile uint32_t AESPTR; //0xc4
    volatile uint32_t TXMICVAL; //0xc8
    volatile uint32_t RXMICVAL; //0xcc
    volatile uint32_t RFTESTCNTL; //0xd0
    volatile uint32_t RFTESTTXSTAT; //0xd4
    volatile uint32_t RFTESTRXSTAT; //0xd8
    volatile uint32_t RESERVED2[1];
    volatile uint32_t TIMGENCNTL; //0xe0
    volatile uint32_t FINETIMTGT; //0xe4
    volatile uint32_t CLKNTGT1; //0xe8
    volatile uint32_t HMICROSECTGT1; //0xec
    volatile uint32_t CLKNTGT2; //0xf0
    volatile uint32_t HMICROSECTGT2; //0xf4
    volatile uint32_t SLOTCLK; //0xf8
    volatile uint32_t FINETIMECNT; //0xfc
    volatile uint32_t ACTSCHCNTL; //0x100
    volatile uint32_t STARTEVTCLKNTS; //0x104
    volatile uint32_t STARTEVTFINECNTTS; //0x108
    volatile uint32_t ENDEVTCLKNTS; //0x10c
    volatile uint32_t ENDEVTFINECNTTS; //0x110
    volatile uint32_t SKIPEVTCLKNTS; //0x114
    volatile uint32_t SKIPEVTFINECNTTS; //0x118
    volatile uint32_t RESERVED3[1];
    volatile uint32_t ADVTIM; //0x120
    volatile uint32_t ACTSCANCNTL; //0x124
    volatile uint32_t RESERVED4[2];
    volatile uint32_t WPALCNTL; //0x130
    volatile uint32_t WPALCURRENTPTR; //0x134
    volatile uint32_t SEARCH_TIMEOUT; //0x138
    volatile uint32_t RESERVED5[1];
    volatile uint32_t COEXIFCNTL0; //0x140
    volatile uint32_t COEXIFCNTL1; //0x144
    volatile uint32_t COEXIFCNTL2; //0x148
    volatile uint32_t BLEMPRIO0; //0x14c
    volatile uint32_t BLEMPRIO1; //0x150
    volatile uint32_t BLEMPRIO2; //0x154
    volatile uint32_t RESERVED6[2];
    volatile uint32_t RALCNTL; //0x160
    volatile uint32_t RALCURRENTPTR; //0x164
    volatile uint32_t RAL_LOCAL_RND; //0x168
    volatile uint32_t RAL_PEER_RND; //0x16c
    volatile uint32_t DFCNTL0_1US; //0x170
    volatile uint32_t DFCNTL0_2US; //0x174
    volatile uint32_t DFCNTL1_1US; //0x178
    volatile uint32_t DFCNTL1_2US; //0x17c
    volatile uint32_t DFCURRENTPTR; //0x180
    volatile uint32_t DFANTCNTL; //0x184
    volatile uint32_t DFIFCNTL; //0x188
}reg_rwmac_t;

enum RWMAC_REG_RWBLECNTL_FIELD
{
    RWMAC_MASTER_SOFT_RST_MASK = (int)0x80000000,
    RWMAC_MASTER_SOFT_RST_POS = 31,
    RWMAC_MASTER_TGSOFT_RST_MASK = (int)0x40000000,
    RWMAC_MASTER_TGSOFT_RST_POS = 30,
    RWMAC_REG_SOFT_RST_MASK = (int)0x20000000,
    RWMAC_REG_SOFT_RST_POS = 29,
    RWMAC_RADIOCNTL_SOFT_RST_MASK = (int)0x10000000,
    RWMAC_RADIOCNTL_SOFT_RST_POS = 28,
    RWMAC_SWINT_REQ_MASK = (int)0x8000000,
    RWMAC_SWINT_REQ_POS = 27,
    RWMAC_RFTEST_ABORT_MASK = (int)0x4000000,
    RWMAC_RFTEST_ABORT_POS = 26,
    RWMAC_ADVERT_ABORT_MASK = (int)0x2000000,
    RWMAC_ADVERT_ABORT_POS = 25,
    RWMAC_SCAN_ABORT_MASK = (int)0x1000000,
    RWMAC_SCAN_ABORT_POS = 24,
    RWMAC_MD_DSB_MASK = (int)0x100000,
    RWMAC_MD_DSB_POS = 20,
    RWMAC_SN_DSB_MASK = (int)0x80000,
    RWMAC_SN_DSB_POS = 19,
    RWMAC_NESN_DSB_MASK = (int)0x40000,
    RWMAC_NESN_DSB_POS = 18,
    RWMAC_CRYPT_DSB_MASK = (int)0x20000,
    RWMAC_CRYPT_DSB_POS = 17,
    RWMAC_LRPMAP_DSB_MASK = (int)0x10000,
    RWMAC_LRPMAP_DSB_POS = 16,
    RWMAC_LRFEC_DSB_MASK = (int)0x8000,
    RWMAC_LRFEC_DSB_POS = 15,
    RWMAC_WHIT_DSB_MASK = (int)0x4000,
    RWMAC_WHIT_DSB_POS = 14,
    RWMAC_CRC_DSB_MASK = (int)0x2000,
    RWMAC_CRC_DSB_POS = 13,
    RWMAC_HOP_REMAP_DSB_MASK = (int)0x1000,
    RWMAC_HOP_REMAP_DSB_POS = 12,
    RWMAC_RXCTEERR_RETX_EN_MASK = (int)0x800,
    RWMAC_RXCTEERR_RETX_EN_POS = 11,
    RWMAC_ANONYMOUS_ADV_FILT_EN_MASK = (int)0x400,
    RWMAC_ANONYMOUS_ADV_FILT_EN_POS = 10,
    RWMAC_ADVERTFILT_EN_MASK = (int)0x200,
    RWMAC_ADVERTFILT_EN_POS = 9,
    RWMAC_RWBLE_EN_MASK = (int)0x100,
    RWMAC_RWBLE_EN_POS = 8,
    RWMAC_RXWINSZDEF_MASK = (int)0xf,
    RWMAC_RXWINSZDEF_POS = 0,
};

enum RWMAC_REG_VERSION_FIELD
{
    RWMAC_TYP_MASK = (int)0xff000000,
    RWMAC_TYP_POS = 24,
    RWMAC_REL_MASK = (int)0xff0000,
    RWMAC_REL_POS = 16,
    RWMAC_UPG_MASK = (int)0xff00,
    RWMAC_UPG_POS = 8,
    RWMAC_BUILD_MASK = (int)0xff,
    RWMAC_BUILD_POS = 0,
};

enum RWMAC_REG_RWBLECONF_FIELD
{
    RWMAC_DMMODE_MASK = (int)0x80000000,
    RWMAC_DMMODE_POS = 31,
    RWMAC_CORRELATOR_MASK = (int)0x10000000,
    RWMAC_CORRELATOR_POS = 28,
    RWMAC_USERXLR_MASK = (int)0x8000000,
    RWMAC_USERXLR_POS = 27,
    RWMAC_USETXLR_MASK = (int)0x4000000,
    RWMAC_USETXLR_POS = 26,
    RWMAC_USEISO_MASK = (int)0x1000000,
    RWMAC_USEISO_POS = 24,
    RWMAC_WLANCOEX_MASK = (int)0x200000,
    RWMAC_WLANCOEX_POS = 21,
    RWMAC_RFIF_MASK = (int)0x1f0000,
    RWMAC_RFIF_POS = 16,
    RWMAC_USEDBG_MASK = (int)0x8000,
    RWMAC_USEDBG_POS = 15,
    RWMAC_DECIPHER_MASK = (int)0x4000,
    RWMAC_DECIPHER_POS = 14,
    RWMAC_CLK_SEL_MASK = (int)0x3f00,
    RWMAC_CLK_SEL_POS = 8,
    RWMAC_INTMODE_MASK = (int)0x80,
    RWMAC_INTMODE_POS = 7,
    RWMAC_BUS_TYPE_MASK = (int)0x40,
    RWMAC_BUS_TYPE_POS = 6,
    RWMAC_ADDR_WIDTH_MASK = (int)0x1f,
    RWMAC_ADDR_WIDTH_POS = 0,
};

enum RWMAC_REG_INTCNTL0_FIELD
{
    RWMAC_ERRORINTMSK_MASK = (int)0x10000,
    RWMAC_ERRORINTMSK_POS = 16,
    RWMAC_ISORXINTMSK_MASK = (int)0x40,
    RWMAC_ISORXINTMSK_POS = 6,
    RWMAC_ISOTXINTMSK_MASK = (int)0x20,
    RWMAC_ISOTXINTMSK_POS = 5,
    RWMAC_RXINTMSK_MASK = (int)0x10,
    RWMAC_RXINTMSK_POS = 4,
    RWMAC_TXINTMSK_MASK = (int)0x8,
    RWMAC_TXINTMSK_POS = 3,
    RWMAC_SKIPEVTINTMSK_MASK = (int)0x4,
    RWMAC_SKIPEVTINTMSK_POS = 2,
    RWMAC_ENDEVTINTMSK_MASK = (int)0x2,
    RWMAC_ENDEVTINTMSK_POS = 1,
    RWMAC_STARTEVTINTMSK_MASK = (int)0x1,
    RWMAC_STARTEVTINTMSK_POS = 0,
};

enum RWMAC_REG_INTSTAT0_FIELD
{
    RWMAC_ERRORINTSTAT_MASK = (int)0x10000,
    RWMAC_ERRORINTSTAT_POS = 16,
};

enum RWMAC_REG_INTACK0_FIELD
{
    RWMAC_ERRORINTACK_MASK = (int)0x10000,
    RWMAC_ERRORINTACK_POS = 16,
};

enum RWMAC_REG_INTCNTL1_FIELD
{
    RWMAC_CLKNINTSRMSK_MASK = (int)0x70000000,
    RWMAC_CLKNINTSRMSK_POS = 28,
    RWMAC_CLKNINTSRVAL_MASK = (int)0xf000000,
    RWMAC_CLKNINTSRVAL_POS = 24,
    RWMAC_FIFOINTMSK_MASK = (int)0x8000,
    RWMAC_FIFOINTMSK_POS = 15,
    RWMAC_TIMESTAMPTGT2INTMSK_MASK = (int)0x40,
    RWMAC_TIMESTAMPTGT2INTMSK_POS = 6,
    RWMAC_TIMESTAMPTGT1INTMSK_MASK = (int)0x20,
    RWMAC_TIMESTAMPTGT1INTMSK_POS = 5,
    RWMAC_FINETGTINTMSK_MASK = (int)0x10,
    RWMAC_FINETGTINTMSK_POS = 4,
    RWMAC_SWINTMSK_MASK = (int)0x8,
    RWMAC_SWINTMSK_POS = 3,
    RWMAC_CRYPTINTMSK_MASK = (int)0x4,
    RWMAC_CRYPTINTMSK_POS = 2,
    RWMAC_SLPINTMSK_MASK = (int)0x2,
    RWMAC_SLPINTMSK_POS = 1,
    RWMAC_CLKNINTMSK_MASK = (int)0x1,
    RWMAC_CLKNINTMSK_POS = 0,
};

enum RWMAC_REG_INTSTAT1_FIELD
{
    RWMAC_FIFOINTSTAT_MASK = (int)0x8000,
    RWMAC_FIFOINTSTAT_POS = 15,
    RWMAC_TIMESTAMPTGT2INTSTAT_MASK = (int)0x40,
    RWMAC_TIMESTAMPTGT2INTSTAT_POS = 6,
    RWMAC_TIMESTAMPTGT1INTSTAT_MASK = (int)0x20,
    RWMAC_TIMESTAMPTGT1INTSTAT_POS = 5,
    RWMAC_FINETGTINTSTAT_MASK = (int)0x10,
    RWMAC_FINETGTINTSTAT_POS = 4,
    RWMAC_SWINTSTAT_MASK = (int)0x8,
    RWMAC_SWINTSTAT_POS = 3,
    RWMAC_CRYPTINTSTAT_MASK = (int)0x4,
    RWMAC_CRYPTINTSTAT_POS = 2,
    RWMAC_SLPINTSTAT_MASK = (int)0x2,
    RWMAC_SLPINTSTAT_POS = 1,
    RWMAC_CLKNINTSTAT_MASK = (int)0x1,
    RWMAC_CLKNINTSTAT_POS = 0,
};

enum RWMAC_REG_INTACK1_FIELD
{
    RWMAC_FIFOINTACK_MASK = (int)0x8000,
    RWMAC_FIFOINTACK_POS = 15,
    RWMAC_TIMESTAMPTGT2INTACK_MASK = (int)0x40,
    RWMAC_TIMESTAMPTGT2INTACK_POS = 6,
    RWMAC_TIMESTAMPTGT1INTACK_MASK = (int)0x20,
    RWMAC_TIMESTAMPTGT1INTACK_POS = 5,
    RWMAC_FINETGTINTACK_MASK = (int)0x10,
    RWMAC_FINETGTINTACK_POS = 4,
    RWMAC_SWINTACK_MASK = (int)0x8,
    RWMAC_SWINTACK_POS = 3,
    RWMAC_CRYPTINTACK_MASK = (int)0x4,
    RWMAC_CRYPTINTACK_POS = 2,
    RWMAC_SLPINTACK_MASK = (int)0x2,
    RWMAC_SLPINTACK_POS = 1,
    RWMAC_CLKNINTACK_MASK = (int)0x1,
    RWMAC_CLKNINTACK_POS = 0,
};

enum RWMAC_REG_ACTFIFOSTAT_FIELD
{
    RWMAC_SKIP_ET_IDX_MASK = (int)0xf0000000,
    RWMAC_SKIP_ET_IDX_POS = 28,
    RWMAC_CURRENT_ET_IDX_MASK = (int)0xf000000,
    RWMAC_CURRENT_ET_IDX_POS = 24,
    RWMAC_ACTFLAG_MASK = (int)0x8000,
    RWMAC_ACTFLAG_POS = 15,
    RWMAC_ISORXINTSTAT_MASK = (int)0x40,
    RWMAC_ISORXINTSTAT_POS = 6,
    RWMAC_ISOTXINTSTAT_MASK = (int)0x20,
    RWMAC_ISOTXINTSTAT_POS = 5,
    RWMAC_RXINTSTAT_MASK = (int)0x10,
    RWMAC_RXINTSTAT_POS = 4,
    RWMAC_TXINTSTAT_MASK = (int)0x8,
    RWMAC_TXINTSTAT_POS = 3,
    RWMAC_SKIPACTINTSTAT_MASK = (int)0x4,
    RWMAC_SKIPACTINTSTAT_POS = 2,
    RWMAC_ENDACTINTSTAT_MASK = (int)0x2,
    RWMAC_ENDACTINTSTAT_POS = 1,
    RWMAC_STARTACTINTSTAT_MASK = (int)0x1,
    RWMAC_STARTACTINTSTAT_POS = 0,
};

enum RWMAC_REG_CURRENTRXDESCPTR_FIELD
{
    RWMAC_CURRENTRXDESCPTR_MASK = (int)0x3fff,
    RWMAC_CURRENTRXDESCPTR_POS = 0,
};

enum RWMAC_REG_ETPTR_FIELD
{
    RWMAC_ETPTR_MASK = (int)0x3fff,
    RWMAC_ETPTR_POS = 0,
};

enum RWMAC_REG_DEEPSLCNTL_FIELD
{
    RWMAC_EXTWKUPDSB_MASK = (int)0x80000000,
    RWMAC_EXTWKUPDSB_POS = 31,
    RWMAC_DEEP_SLEEP_STAT_MASK = (int)0x8000,
    RWMAC_DEEP_SLEEP_STAT_POS = 15,
    RWMAC_DEEP_SLEEP_CORR_EN_MASK = (int)0x8,
    RWMAC_DEEP_SLEEP_CORR_EN_POS = 3,
    RWMAC_DEEP_SLEEP_ON_MASK = (int)0x4,
    RWMAC_DEEP_SLEEP_ON_POS = 2,
    RWMAC_RADIO_SLEEP_EN_MASK = (int)0x2,
    RWMAC_RADIO_SLEEP_EN_POS = 1,
    RWMAC_OSC_SLEEP_EN_MASK = (int)0x1,
    RWMAC_OSC_SLEEP_EN_POS = 0,
};

enum RWMAC_REG_DEEPSLWKUP_FIELD
{
    RWMAC_DEEPSLTIME_MASK = (int)0xffffffff,
    RWMAC_DEEPSLTIME_POS = 0,
};

enum RWMAC_REG_DEEPSLSTAT_FIELD
{
    RWMAC_DEEPSLDUR_MASK = (int)0xffffffff,
    RWMAC_DEEPSLDUR_POS = 0,
};

enum RWMAC_REG_ENBPRESET_FIELD
{
    RWMAC_TWEXT_MASK = (int)0xffe00000,
    RWMAC_TWEXT_POS = 21,
    RWMAC_TWOSC_MASK = (int)0x1ffc00,
    RWMAC_TWOSC_POS = 10,
    RWMAC_TWRM_MASK = (int)0x3ff,
    RWMAC_TWRM_POS = 0,
};

enum RWMAC_REG_FINECNTCORR_FIELD
{
    RWMAC_FINECNTCORR_MASK = (int)0x3ff,
    RWMAC_FINECNTCORR_POS = 0,
};

enum RWMAC_REG_CLKNCNTCORR_FIELD
{
    RWMAC_ABS_DELTA_MASK = (int)0x80000000,
    RWMAC_ABS_DELTA_POS = 31,
    RWMAC_CLKNCNTCORR_MASK = (int)0xfffffff,
    RWMAC_CLKNCNTCORR_POS = 0,
};

enum RWMAC_REG_DIAGCNTL_FIELD
{
    RWMAC_DIAG3_EN_MASK = (int)0x80000000,
    RWMAC_DIAG3_EN_POS = 31,
    RWMAC_DIAG3_MASK = (int)0x7f000000,
    RWMAC_DIAG3_POS = 24,
    RWMAC_DIAG2_EN_MASK = (int)0x800000,
    RWMAC_DIAG2_EN_POS = 23,
    RWMAC_DIAG2_MASK = (int)0x7f0000,
    RWMAC_DIAG2_POS = 16,
    RWMAC_DIAG1_EN_MASK = (int)0x8000,
    RWMAC_DIAG1_EN_POS = 15,
    RWMAC_DIAG1_MASK = (int)0x7f00,
    RWMAC_DIAG1_POS = 8,
    RWMAC_DIAG0_EN_MASK = (int)0x80,
    RWMAC_DIAG0_EN_POS = 7,
    RWMAC_DIAG0_MASK = (int)0x7f,
    RWMAC_DIAG0_POS = 0,
};

enum RWMAC_REG_DIAGSTAT_FIELD
{
    RWMAC_DIAG3STAT_MASK = (int)0xff000000,
    RWMAC_DIAG3STAT_POS = 24,
    RWMAC_DIAG2STAT_MASK = (int)0xff0000,
    RWMAC_DIAG2STAT_POS = 16,
    RWMAC_DIAG1STAT_MASK = (int)0xff00,
    RWMAC_DIAG1STAT_POS = 8,
    RWMAC_DIAG0STAT_MASK = (int)0xff,
    RWMAC_DIAG0STAT_POS = 0,
};

enum RWMAC_REG_DEBUGADDMAX_FIELD
{
    RWMAC_REG_ADDMAX_MASK = (int)0xffff0000,
    RWMAC_REG_ADDMAX_POS = 16,
    RWMAC_EM_ADDMAX_MASK = (int)0xffff,
    RWMAC_EM_ADDMAX_POS = 0,
};

enum RWMAC_REG_DEBUGADDMIN_FIELD
{
    RWMAC_REG_ADDMIN_MASK = (int)0xffff0000,
    RWMAC_REG_ADDMIN_POS = 16,
    RWMAC_EM_ADDMIN_MASK = (int)0xffff,
    RWMAC_EM_ADDMIN_POS = 0,
};

enum RWMAC_REG_ERRORTYPESTAT_FIELD
{
    RWMAC_DFCNTL_EMACC_ERROR_MASK = (int)0x400000,
    RWMAC_DFCNTL_EMACC_ERROR_POS = 22,
    RWMAC_FIFOINTOVF_MASK = (int)0x200000,
    RWMAC_FIFOINTOVF_POS = 21,
    RWMAC_PHY_ERROR_MASK = (int)0x100000,
    RWMAC_PHY_ERROR_POS = 20,
    RWMAC_TXAEHEADER_PTR_ERROR_MASK = (int)0x80000,
    RWMAC_TXAEHEADER_PTR_ERROR_POS = 19,
    RWMAC_TMAFS_UNDERRUN_MASK = (int)0x40000,
    RWMAC_TMAFS_UNDERRUN_POS = 18,
    RWMAC_RAL_UNDERRUN_MASK = (int)0x20000,
    RWMAC_RAL_UNDERRUN_POS = 17,
    RWMAC_RAL_ERROR_MASK = (int)0x10000,
    RWMAC_RAL_ERROR_POS = 16,
    RWMAC_RXDATA_PTR_ERROR_MASK = (int)0x8000,
    RWMAC_RXDATA_PTR_ERROR_POS = 15,
    RWMAC_TXDATA_PTR_ERROR_MASK = (int)0x4000,
    RWMAC_TXDATA_PTR_ERROR_POS = 14,
    RWMAC_RXDESC_EMPTY_ERROR_MASK = (int)0x2000,
    RWMAC_RXDESC_EMPTY_ERROR_POS = 13,
    RWMAC_TXDESC_EMPTY_ERROR_MASK = (int)0x1000,
    RWMAC_TXDESC_EMPTY_ERROR_POS = 12,
    RWMAC_CSFORMAT_ERROR_MASK = (int)0x800,
    RWMAC_CSFORMAT_ERROR_POS = 11,
    RWMAC_LLCHMAP_ERROR_MASK = (int)0x400,
    RWMAC_LLCHMAP_ERROR_POS = 10,
    RWMAC_ADV_UNDERRUN_MASK = (int)0x200,
    RWMAC_ADV_UNDERRUN_POS = 9,
    RWMAC_IFS_UNDERRUN_MASK = (int)0x100,
    RWMAC_IFS_UNDERRUN_POS = 8,
    RWMAC_LIST_ERROR_MASK = (int)0x80,
    RWMAC_LIST_ERROR_POS = 7,
    RWMAC_EVT_CNTL_APFM_ERROR_MASK = (int)0x40,
    RWMAC_EVT_CNTL_APFM_ERROR_POS = 6,
    RWMAC_ACT_SCHDL_APFM_ERROR_MASK = (int)0x20,
    RWMAC_ACT_SCHDL_APFM_ERROR_POS = 5,
    RWMAC_ACT_SCHDL_ENTRY_ERROR_MASK = (int)0x10,
    RWMAC_ACT_SCHDL_ENTRY_ERROR_POS = 4,
    RWMAC_RADIO_EMACC_ERROR_MASK = (int)0x8,
    RWMAC_RADIO_EMACC_ERROR_POS = 3,
    RWMAC_PKTCNTL_EMACC_ERROR_MASK = (int)0x4,
    RWMAC_PKTCNTL_EMACC_ERROR_POS = 2,
    RWMAC_RXCRYPT_ERROR_MASK = (int)0x2,
    RWMAC_RXCRYPT_ERROR_POS = 1,
    RWMAC_TXCRYPT_ERROR_MASK = (int)0x1,
    RWMAC_TXCRYPT_ERROR_POS = 0,
};

enum RWMAC_REG_SWPROFILING_FIELD
{
    RWMAC_SWPROF31_MASK = (int)0x80000000,
    RWMAC_SWPROF31_POS = 31,
    RWMAC_SWPROF30_MASK = (int)0x40000000,
    RWMAC_SWPROF30_POS = 30,
    RWMAC_SWPROF29_MASK = (int)0x20000000,
    RWMAC_SWPROF29_POS = 29,
    RWMAC_SWPROF28_MASK = (int)0x10000000,
    RWMAC_SWPROF28_POS = 28,
    RWMAC_SWPROF27_MASK = (int)0x8000000,
    RWMAC_SWPROF27_POS = 27,
    RWMAC_SWPROF26_MASK = (int)0x4000000,
    RWMAC_SWPROF26_POS = 26,
    RWMAC_SWPROF25_MASK = (int)0x2000000,
    RWMAC_SWPROF25_POS = 25,
    RWMAC_SWPROF24_MASK = (int)0x1000000,
    RWMAC_SWPROF24_POS = 24,
    RWMAC_SWPROF23_MASK = (int)0x800000,
    RWMAC_SWPROF23_POS = 23,
    RWMAC_SWPROF22_MASK = (int)0x400000,
    RWMAC_SWPROF22_POS = 22,
    RWMAC_SWPROF21_MASK = (int)0x200000,
    RWMAC_SWPROF21_POS = 21,
    RWMAC_SWPROF20_MASK = (int)0x100000,
    RWMAC_SWPROF20_POS = 20,
    RWMAC_SWPROF19_MASK = (int)0x80000,
    RWMAC_SWPROF19_POS = 19,
    RWMAC_SWPROF18_MASK = (int)0x40000,
    RWMAC_SWPROF18_POS = 18,
    RWMAC_SWPROF17_MASK = (int)0x20000,
    RWMAC_SWPROF17_POS = 17,
    RWMAC_SWPROF16_MASK = (int)0x10000,
    RWMAC_SWPROF16_POS = 16,
    RWMAC_SWPROF15_MASK = (int)0x8000,
    RWMAC_SWPROF15_POS = 15,
    RWMAC_SWPROF14_MASK = (int)0x4000,
    RWMAC_SWPROF14_POS = 14,
    RWMAC_SWPROF13_MASK = (int)0x2000,
    RWMAC_SWPROF13_POS = 13,
    RWMAC_SWPROF12_MASK = (int)0x1000,
    RWMAC_SWPROF12_POS = 12,
    RWMAC_SWPROF11_MASK = (int)0x800,
    RWMAC_SWPROF11_POS = 11,
    RWMAC_SWPROF10_MASK = (int)0x400,
    RWMAC_SWPROF10_POS = 10,
    RWMAC_SWPROF9_MASK = (int)0x200,
    RWMAC_SWPROF9_POS = 9,
    RWMAC_SWPROF8_MASK = (int)0x100,
    RWMAC_SWPROF8_POS = 8,
    RWMAC_SWPROF7_MASK = (int)0x80,
    RWMAC_SWPROF7_POS = 7,
    RWMAC_SWPROF6_MASK = (int)0x40,
    RWMAC_SWPROF6_POS = 6,
    RWMAC_SWPROF5_MASK = (int)0x20,
    RWMAC_SWPROF5_POS = 5,
    RWMAC_SWPROF4_MASK = (int)0x10,
    RWMAC_SWPROF4_POS = 4,
    RWMAC_SWPROF3_MASK = (int)0x8,
    RWMAC_SWPROF3_POS = 3,
    RWMAC_SWPROF2_MASK = (int)0x4,
    RWMAC_SWPROF2_POS = 2,
    RWMAC_SWPROF1_MASK = (int)0x2,
    RWMAC_SWPROF1_POS = 1,
    RWMAC_SWPROF0_MASK = (int)0x1,
    RWMAC_SWPROF0_POS = 0,
};

enum RWMAC_REG_RADIOCNTL0_FIELD
{
    RWMAC_SPIPTR_MASK = (int)0x3fff0000,
    RWMAC_SPIPTR_POS = 16,
    RWMAC_SPICFG_MASK = (int)0x80,
    RWMAC_SPICFG_POS = 7,
    RWMAC_SPIFREQ_MASK = (int)0x30,
    RWMAC_SPIFREQ_POS = 4,
    RWMAC_SPICOMP_MASK = (int)0x2,
    RWMAC_SPICOMP_POS = 1,
    RWMAC_SPIGO_MASK = (int)0x1,
    RWMAC_SPIGO_POS = 0,
};

enum RWMAC_REG_RADIOCNTL1_FIELD
{
    RWMAC_FORCEAGC_EN_MASK = (int)0x80000000,
    RWMAC_FORCEAGC_EN_POS = 31,
    RWMAC_FORCEIQ_MASK = (int)0x40000000,
    RWMAC_FORCEIQ_POS = 30,
    RWMAC_RXDNSL_MASK = (int)0x20000000,
    RWMAC_RXDNSL_POS = 29,
    RWMAC_TXDNSL_MASK = (int)0x10000000,
    RWMAC_TXDNSL_POS = 28,
    RWMAC_FORCEAGC_LENGTH_MASK = (int)0xfff0000,
    RWMAC_FORCEAGC_LENGTH_POS = 16,
    RWMAC_SYNC_PULSE_MODE_MASK = (int)0x8000,
    RWMAC_SYNC_PULSE_MODE_POS = 15,
    RWMAC_SYNC_PULSE_SRC_MASK = (int)0x4000,
    RWMAC_SYNC_PULSE_SRC_POS = 14,
    RWMAC_DPCORR_EN_MASK = (int)0x2000,
    RWMAC_DPCORR_EN_POS = 13,
    RWMAC_JEF_SELECT_MASK = (int)0x1000,
    RWMAC_JEF_SELECT_POS = 12,
    RWMAC_XRFSEL_MASK = (int)0x3f0,
    RWMAC_XRFSEL_POS = 4,
    RWMAC_SUBVERSION_MASK = (int)0xf,
    RWMAC_SUBVERSION_POS = 0,
};

enum RWMAC_REG_RADIOCNTL2_FIELD
{
    RWMAC_LRSYNCCOMPMODE_MASK = (int)0xc0000000,
    RWMAC_LRSYNCCOMPMODE_POS = 30,
    RWMAC_RXCITERMBYPASS_MASK = (int)0x20000000,
    RWMAC_RXCITERMBYPASS_POS = 29,
    RWMAC_LRVTBFLUSH_MASK = (int)0x1f000000,
    RWMAC_LRVTBFLUSH_POS = 24,
    RWMAC_PHYMSK_MASK = (int)0xc00000,
    RWMAC_PHYMSK_POS = 22,
    RWMAC_LRSYNCERR_MASK = (int)0x300000,
    RWMAC_LRSYNCERR_POS = 20,
    RWMAC_SYNCERR_MASK = (int)0x70000,
    RWMAC_SYNCERR_POS = 16,
    RWMAC_FREQTABLE_PTR_MASK = (int)0x3fff,
    RWMAC_FREQTABLE_PTR_POS = 0,
};

enum RWMAC_REG_RADIOCNTL3_FIELD
{
    RWMAC_RXRATE3CFG_MASK = (int)0xc0000000,
    RWMAC_RXRATE3CFG_POS = 30,
    RWMAC_RXRATE2CFG_MASK = (int)0x30000000,
    RWMAC_RXRATE2CFG_POS = 28,
    RWMAC_RXRATE1CFG_MASK = (int)0xc000000,
    RWMAC_RXRATE1CFG_POS = 26,
    RWMAC_RXRATE0CFG_MASK = (int)0x3000000,
    RWMAC_RXRATE0CFG_POS = 24,
    RWMAC_GETRSSIDELAY_MASK = (int)0x700000,
    RWMAC_GETRSSIDELAY_POS = 20,
    RWMAC_RXSYNC_ROUTING_MASK = (int)0x40000,
    RWMAC_RXSYNC_ROUTING_POS = 18,
    RWMAC_RXVALID_BEH_MASK = (int)0x30000,
    RWMAC_RXVALID_BEH_POS = 16,
    RWMAC_TXRATE3CFG_MASK = (int)0xc000,
    RWMAC_TXRATE3CFG_POS = 14,
    RWMAC_TXRATE2CFG_MASK = (int)0x3000,
    RWMAC_TXRATE2CFG_POS = 12,
    RWMAC_TXRATE1CFG_MASK = (int)0xc00,
    RWMAC_TXRATE1CFG_POS = 10,
    RWMAC_TXRATE0CFG_MASK = (int)0x300,
    RWMAC_TXRATE0CFG_POS = 8,
    RWMAC_TXVALID_BEH_MASK = (int)0x3,
    RWMAC_TXVALID_BEH_POS = 0,
};

enum RWMAC_REG_RADIOPWRUPDN0_FIELD
{
    RWMAC_SYNC_POSITION0_MASK = (int)0xff000000,
    RWMAC_SYNC_POSITION0_POS = 24,
    RWMAC_RXPWRUP0_MASK = (int)0xff0000,
    RWMAC_RXPWRUP0_POS = 16,
    RWMAC_TXPWRDN0_MASK = (int)0x7f00,
    RWMAC_TXPWRDN0_POS = 8,
    RWMAC_TXPWRUP0_MASK = (int)0xff,
    RWMAC_TXPWRUP0_POS = 0,
};

enum RWMAC_REG_RADIOPWRUPDN1_FIELD
{
    RWMAC_SYNC_POSITION1_MASK = (int)0xff000000,
    RWMAC_SYNC_POSITION1_POS = 24,
    RWMAC_RXPWRUP1_MASK = (int)0xff0000,
    RWMAC_RXPWRUP1_POS = 16,
    RWMAC_TXPWRDN1_MASK = (int)0x7f00,
    RWMAC_TXPWRDN1_POS = 8,
    RWMAC_TXPWRUP1_MASK = (int)0xff,
    RWMAC_TXPWRUP1_POS = 0,
};

enum RWMAC_REG_RADIOPWRUPDN2_FIELD
{
    RWMAC_SYNC_POSITION2_MASK = (int)0xff000000,
    RWMAC_SYNC_POSITION2_POS = 24,
    RWMAC_RXPWRUP2_MASK = (int)0xff0000,
    RWMAC_RXPWRUP2_POS = 16,
    RWMAC_TXPWRDN2_MASK = (int)0x7f00,
    RWMAC_TXPWRDN2_POS = 8,
    RWMAC_TXPWRUP2_MASK = (int)0xff,
    RWMAC_TXPWRUP2_POS = 0,
};

enum RWMAC_REG_RADIOPWRUPDN3_FIELD
{
    RWMAC_TXPWRDN3_MASK = (int)0x7f00,
    RWMAC_TXPWRDN3_POS = 8,
    RWMAC_TXPWRUP3_MASK = (int)0xff,
    RWMAC_TXPWRUP3_POS = 0,
};

enum RWMAC_REG_RADIOTXRXTIM0_FIELD
{
    RWMAC_RFRXTMDA0_MASK = (int)0x7f0000,
    RWMAC_RFRXTMDA0_POS = 16,
    RWMAC_RXPATHDLY0_MASK = (int)0x7f00,
    RWMAC_RXPATHDLY0_POS = 8,
    RWMAC_TXPATHDLY0_MASK = (int)0x7f,
    RWMAC_TXPATHDLY0_POS = 0,
};

enum RWMAC_REG_RADIOTXRXTIM1_FIELD
{
    RWMAC_RFRXTMDA1_MASK = (int)0x7f0000,
    RWMAC_RFRXTMDA1_POS = 16,
    RWMAC_RXPATHDLY1_MASK = (int)0x7f00,
    RWMAC_RXPATHDLY1_POS = 8,
    RWMAC_TXPATHDLY1_MASK = (int)0x7f,
    RWMAC_TXPATHDLY1_POS = 0,
};

enum RWMAC_REG_RADIOTXRXTIM2_FIELD
{
    RWMAC_RXFLUSHPATHDLY2_MASK = (int)0xff000000,
    RWMAC_RXFLUSHPATHDLY2_POS = 24,
    RWMAC_RFRXTMDA2_MASK = (int)0xff0000,
    RWMAC_RFRXTMDA2_POS = 16,
    RWMAC_RXPATHDLY2_MASK = (int)0xff00,
    RWMAC_RXPATHDLY2_POS = 8,
    RWMAC_TXPATHDLY2_MASK = (int)0x7f,
    RWMAC_TXPATHDLY2_POS = 0,
};

enum RWMAC_REG_RADIOTXRXTIM3_FIELD
{
    RWMAC_RXFLUSHPATHDLY3_MASK = (int)0xff000000,
    RWMAC_RXFLUSHPATHDLY3_POS = 24,
    RWMAC_RFRXTMDA3_MASK = (int)0x7f0000,
    RWMAC_RFRXTMDA3_POS = 16,
    RWMAC_TXPATHDLY3_MASK = (int)0x7f,
    RWMAC_TXPATHDLY3_POS = 0,
};

enum RWMAC_REG_SPIPTRCNTL0_FIELD
{
    RWMAC_TXOFFPTR_MASK = (int)0x3fff0000,
    RWMAC_TXOFFPTR_POS = 16,
    RWMAC_TXONPTR_MASK = (int)0x3fff,
    RWMAC_TXONPTR_POS = 0,
};

enum RWMAC_REG_SPIPTRCNTL1_FIELD
{
    RWMAC_RXOFFPTR_MASK = (int)0x3fff0000,
    RWMAC_RXOFFPTR_POS = 16,
    RWMAC_RXONPTR_MASK = (int)0x3fff,
    RWMAC_RXONPTR_POS = 0,
};

enum RWMAC_REG_SPIPTRCNTL2_FIELD
{
    RWMAC_RXLENGTHPTR_MASK = (int)0x3fff0000,
    RWMAC_RXLENGTHPTR_POS = 16,
    RWMAC_RSSIPTR_MASK = (int)0x3fff,
    RWMAC_RSSIPTR_POS = 0,
};

enum RWMAC_REG_SPIPTRCNTL3_FIELD
{
    RWMAC_CTESAMPPTR_MASK = (int)0x3fff0000,
    RWMAC_CTESAMPPTR_POS = 16,
    RWMAC_RXPKTTYPPTR_MASK = (int)0x3fff,
    RWMAC_RXPKTTYPPTR_POS = 0,
};

enum RWMAC_REG_AESCNTL_FIELD
{
    RWMAC_AES_MODE_MASK = (int)0x2,
    RWMAC_AES_MODE_POS = 1,
    RWMAC_AES_START_MASK = (int)0x1,
    RWMAC_AES_START_POS = 0,
};

enum RWMAC_REG_AESKEY31_0_FIELD
{
    RWMAC_AESKEY31_0_MASK = (int)0xffffffff,
    RWMAC_AESKEY31_0_POS = 0,
};

enum RWMAC_REG_AESKEY63_32_FIELD
{
    RWMAC_AESKEY63_32_MASK = (int)0xffffffff,
    RWMAC_AESKEY63_32_POS = 0,
};

enum RWMAC_REG_AESKEY95_64_FIELD
{
    RWMAC_AESKEY95_64_MASK = (int)0xffffffff,
    RWMAC_AESKEY95_64_POS = 0,
};

enum RWMAC_REG_AESKEY127_96_FIELD
{
    RWMAC_AESKEY127_96_MASK = (int)0xffffffff,
    RWMAC_AESKEY127_96_POS = 0,
};

enum RWMAC_REG_AESPTR_FIELD
{
    RWMAC_AESPTR_MASK = (int)0x3fff,
    RWMAC_AESPTR_POS = 0,
};

enum RWMAC_REG_TXMICVAL_FIELD
{
    RWMAC_TXMICVAL_MASK = (int)0xffffffff,
    RWMAC_TXMICVAL_POS = 0,
};

enum RWMAC_REG_RXMICVAL_FIELD
{
    RWMAC_RXMICVAL_MASK = (int)0xffffffff,
    RWMAC_RXMICVAL_POS = 0,
};

enum RWMAC_REG_RFTESTCNTL_FIELD
{
    RWMAC_INFINITERX_MASK = (int)0x80000000,
    RWMAC_INFINITERX_POS = 31,
    RWMAC_RXPKTCNTEN_MASK = (int)0x8000000,
    RWMAC_RXPKTCNTEN_POS = 27,
    RWMAC_PERCOUNT_MODE_MASK = (int)0x3000000,
    RWMAC_PERCOUNT_MODE_POS = 24,
    RWMAC_INFINITETX_MASK = (int)0x8000,
    RWMAC_INFINITETX_POS = 15,
    RWMAC_TXLENGTHSRC_MASK = (int)0x4000,
    RWMAC_TXLENGTHSRC_POS = 14,
    RWMAC_PRBSTYPE_MASK = (int)0x2000,
    RWMAC_PRBSTYPE_POS = 13,
    RWMAC_TXPLDSRC_MASK = (int)0x1000,
    RWMAC_TXPLDSRC_POS = 12,
    RWMAC_TXPKTCNTEN_MASK = (int)0x800,
    RWMAC_TXPKTCNTEN_POS = 11,
    RWMAC_TXLENGTH_MASK = (int)0xff,
    RWMAC_TXLENGTH_POS = 0,
};

enum RWMAC_REG_RFTESTTXSTAT_FIELD
{
    RWMAC_TXPKTCNT_MASK = (int)0xffffffff,
    RWMAC_TXPKTCNT_POS = 0,
};

enum RWMAC_REG_RFTESTRXSTAT_FIELD
{
    RWMAC_RXPKTCNT_MASK = (int)0xffffffff,
    RWMAC_RXPKTCNT_POS = 0,
};

enum RWMAC_REG_TIMGENCNTL_FIELD
{
    RWMAC_PREFETCHABORT_TIME_MASK = (int)0x3ff0000,
    RWMAC_PREFETCHABORT_TIME_POS = 16,
    RWMAC_PREFETCH_TIME_MASK = (int)0x1ff,
    RWMAC_PREFETCH_TIME_POS = 0,
};

enum RWMAC_REG_FINETIMTGT_FIELD
{
    RWMAC_FINETARGET_MASK = (int)0xfffffff,
    RWMAC_FINETARGET_POS = 0,
};

enum RWMAC_REG_CLKNTGT1_FIELD
{
    RWMAC_CLKNTGT1_MASK = (int)0xfffffff,
    RWMAC_CLKNTGT1_POS = 0,
};

enum RWMAC_REG_HMICROSECTGT1_FIELD
{
    RWMAC_HMICROSECTGT1_MASK = (int)0x3ff,
    RWMAC_HMICROSECTGT1_POS = 0,
};

enum RWMAC_REG_CLKNTGT2_FIELD
{
    RWMAC_CLKNTGT2_MASK = (int)0xfffffff,
    RWMAC_CLKNTGT2_POS = 0,
};

enum RWMAC_REG_HMICROSECTGT2_FIELD
{
    RWMAC_HMICROSECTGT2_MASK = (int)0x3ff,
    RWMAC_HMICROSECTGT2_POS = 0,
};

enum RWMAC_REG_SLOTCLK_FIELD
{
    RWMAC_SAMP_MASK = (int)0x80000000,
    RWMAC_SAMP_POS = 31,
    RWMAC_CLKN_UPD_MASK = (int)0x40000000,
    RWMAC_CLKN_UPD_POS = 30,
    RWMAC_SCLK_MASK = (int)0xfffffff,
    RWMAC_SCLK_POS = 0,
};

enum RWMAC_REG_FINETIMECNT_FIELD
{
    RWMAC_FINECNT_MASK = (int)0x3ff,
    RWMAC_FINECNT_POS = 0,
};

enum RWMAC_REG_ACTSCHCNTL_FIELD
{
    RWMAC_START_ACT_MASK = (int)0x80000000,
    RWMAC_START_ACT_POS = 31,
    RWMAC_ENTRY_IDX_MASK = (int)0xf,
    RWMAC_ENTRY_IDX_POS = 0,
};

enum RWMAC_REG_STARTEVTCLKNTS_FIELD
{
    RWMAC_STARTEVTCLKNTS_MASK = (int)0xfffffff,
    RWMAC_STARTEVTCLKNTS_POS = 0,
};

enum RWMAC_REG_STARTEVTFINECNTTS_FIELD
{
    RWMAC_STARTEVTFINECNTTS_MASK = (int)0x3ff,
    RWMAC_STARTEVTFINECNTTS_POS = 0,
};

enum RWMAC_REG_ENDEVTCLKNTS_FIELD
{
    RWMAC_ENDEVTCLKNTS_MASK = (int)0xfffffff,
    RWMAC_ENDEVTCLKNTS_POS = 0,
};

enum RWMAC_REG_ENDEVTFINECNTTS_FIELD
{
    RWMAC_ENDEVTFINECNTTS_MASK = (int)0x3ff,
    RWMAC_ENDEVTFINECNTTS_POS = 0,
};

enum RWMAC_REG_SKIPEVTCLKNTS_FIELD
{
    RWMAC_SKIPEVTCLKNTS_MASK = (int)0xfffffff,
    RWMAC_SKIPEVTCLKNTS_POS = 0,
};

enum RWMAC_REG_SKIPEVTFINECNTTS_FIELD
{
    RWMAC_SKIPEVTFINECNTTS_MASK = (int)0x3ff,
    RWMAC_SKIPEVTFINECNTTS_POS = 0,
};

enum RWMAC_REG_ADVTIM_FIELD
{
    RWMAC_TX_AUXPTR_THR_MASK = (int)0xff000000,
    RWMAC_TX_AUXPTR_THR_POS = 24,
    RWMAC_RX_AUXPTR_THR_MASK = (int)0xff0000,
    RWMAC_RX_AUXPTR_THR_POS = 16,
    RWMAC_ADVINT_MASK = (int)0x3fff,
    RWMAC_ADVINT_POS = 0,
};

enum RWMAC_REG_ACTSCANCNTL_FIELD
{
    RWMAC_BACKOFF_MASK = (int)0x1ff0000,
    RWMAC_BACKOFF_POS = 16,
    RWMAC_UPPERLIMIT_MASK = (int)0x1ff,
    RWMAC_UPPERLIMIT_POS = 0,
};

enum RWMAC_REG_WPALCNTL_FIELD
{
    RWMAC_WPALNBDEV_MASK = (int)0xff0000,
    RWMAC_WPALNBDEV_POS = 16,
    RWMAC_WPALBASEPTR_MASK = (int)0x3fff,
    RWMAC_WPALBASEPTR_POS = 0,
};

enum RWMAC_REG_WPALCURRENTPTR_FIELD
{
    RWMAC_WPALCURRENTPTR_MASK = (int)0x3fff,
    RWMAC_WPALCURRENTPTR_POS = 0,
};

enum RWMAC_REG_SEARCH_TIMEOUT_FIELD
{
    RWMAC_SEARCH_TIMEOUT_MASK = (int)0x3f,
    RWMAC_SEARCH_TIMEOUT_POS = 0,
};

enum RWMAC_REG_COEXIFCNTL0_FIELD
{
    RWMAC_MWSSCANFREQMSK_MASK = (int)0x300000,
    RWMAC_MWSSCANFREQMSK_POS = 20,
    RWMAC_WLCRXPRIOMODE_MASK = (int)0xc0000,
    RWMAC_WLCRXPRIOMODE_POS = 18,
    RWMAC_WLCTXPRIOMODE_MASK = (int)0x30000,
    RWMAC_WLCTXPRIOMODE_POS = 16,
    RWMAC_MWSTXFRQMSK_MASK = (int)0xc000,
    RWMAC_MWSTXFRQMSK_POS = 14,
    RWMAC_MWSRXFRQMSK_MASK = (int)0x3000,
    RWMAC_MWSRXFRQMSK_POS = 12,
    RWMAC_MWSTXMSK_MASK = (int)0xc00,
    RWMAC_MWSTXMSK_POS = 10,
    RWMAC_MWSRXMSK_MASK = (int)0x300,
    RWMAC_MWSRXMSK_POS = 8,
    RWMAC_WLANTXMSK_MASK = (int)0xc0,
    RWMAC_WLANTXMSK_POS = 6,
    RWMAC_WLANRXMSK_MASK = (int)0x30,
    RWMAC_WLANRXMSK_POS = 4,
    RWMAC_MWSWCI_EN_MASK = (int)0x8,
    RWMAC_MWSWCI_EN_POS = 3,
    RWMAC_MWSCOEX_EN_MASK = (int)0x4,
    RWMAC_MWSCOEX_EN_POS = 2,
    RWMAC_SYNCGEN_EN_MASK = (int)0x2,
    RWMAC_SYNCGEN_EN_POS = 1,
    RWMAC_WLANCOEX_EN_MASK = (int)0x1,
    RWMAC_WLANCOEX_EN_POS = 0,
};

enum RWMAC_REG_COEXIFCNTL1_FIELD
{
    RWMAC_WLCPRXTHR_MASK = (int)0x1f000000,
    RWMAC_WLCPRXTHR_POS = 24,
    RWMAC_WLCPTXTHR_MASK = (int)0x1f0000,
    RWMAC_WLCPTXTHR_POS = 16,
    RWMAC_WLCPDURATION_MASK = (int)0x7f00,
    RWMAC_WLCPDURATION_POS = 8,
    RWMAC_WLCPDELAY_MASK = (int)0x7f,
    RWMAC_WLCPDELAY_POS = 0,
};

enum RWMAC_REG_COEXIFCNTL2_FIELD
{
    RWMAC_RX_ANT_DELAY_MASK = (int)0xf00,
    RWMAC_RX_ANT_DELAY_POS = 8,
    RWMAC_TX_ANT_DELAY_MASK = (int)0xf,
    RWMAC_TX_ANT_DELAY_POS = 0,
};

enum RWMAC_REG_BLEMPRIO0_FIELD
{
    RWMAC_BLEM7_MASK = (int)0xf0000000,
    RWMAC_BLEM7_POS = 28,
    RWMAC_BLEM6_MASK = (int)0xf000000,
    RWMAC_BLEM6_POS = 24,
    RWMAC_BLEM5_MASK = (int)0xf00000,
    RWMAC_BLEM5_POS = 20,
    RWMAC_BLEM4_MASK = (int)0xf0000,
    RWMAC_BLEM4_POS = 16,
    RWMAC_BLEM3_MASK = (int)0xf000,
    RWMAC_BLEM3_POS = 12,
    RWMAC_BLEM2_MASK = (int)0xf00,
    RWMAC_BLEM2_POS = 8,
    RWMAC_BLEM1_MASK = (int)0xf0,
    RWMAC_BLEM1_POS = 4,
    RWMAC_BLEM0_MASK = (int)0xf,
    RWMAC_BLEM0_POS = 0,
};

enum RWMAC_REG_BLEMPRIO1_FIELD
{
    RWMAC_BLEM15_MASK = (int)0xf0000000,
    RWMAC_BLEM15_POS = 28,
    RWMAC_BLEM14_MASK = (int)0xf000000,
    RWMAC_BLEM14_POS = 24,
    RWMAC_BLEM13_MASK = (int)0xf00000,
    RWMAC_BLEM13_POS = 20,
    RWMAC_BLEM12_MASK = (int)0xf0000,
    RWMAC_BLEM12_POS = 16,
    RWMAC_BLEM11_MASK = (int)0xf000,
    RWMAC_BLEM11_POS = 12,
    RWMAC_BLEM10_MASK = (int)0xf00,
    RWMAC_BLEM10_POS = 8,
    RWMAC_BLEM9_MASK = (int)0xf0,
    RWMAC_BLEM9_POS = 4,
    RWMAC_BLEM8_MASK = (int)0xf,
    RWMAC_BLEM8_POS = 0,
};

enum RWMAC_REG_BLEMPRIO2_FIELD
{
    RWMAC_BLEMDEFAULT_MASK = (int)0xf0000000,
    RWMAC_BLEMDEFAULT_POS = 28,
    RWMAC_BLEM18_MASK = (int)0xf00,
    RWMAC_BLEM18_POS = 8,
    RWMAC_BLEM17_MASK = (int)0xf0,
    RWMAC_BLEM17_POS = 4,
    RWMAC_BLEM16_MASK = (int)0xf,
    RWMAC_BLEM16_POS = 0,
};

enum RWMAC_REG_RALCNTL_FIELD
{
    RWMAC_RALNBDEV_MASK = (int)0xff0000,
    RWMAC_RALNBDEV_POS = 16,
    RWMAC_RALBASEPTR_MASK = (int)0x3fff,
    RWMAC_RALBASEPTR_POS = 0,
};

enum RWMAC_REG_RALCURRENTPTR_FIELD
{
    RWMAC_RALCURRENTPTR_MASK = (int)0x3fff,
    RWMAC_RALCURRENTPTR_POS = 0,
};

enum RWMAC_REG_RAL_LOCAL_RND_FIELD
{
    RWMAC_LRND_INIT_MASK = (int)0x80000000,
    RWMAC_LRND_INIT_POS = 31,
    RWMAC_LRND_VAL_MASK = (int)0x3fffff,
    RWMAC_LRND_VAL_POS = 0,
};

enum RWMAC_REG_RAL_PEER_RND_FIELD
{
    RWMAC_PRND_INIT_MASK = (int)0x80000000,
    RWMAC_PRND_INIT_POS = 31,
    RWMAC_PRND_VAL_MASK = (int)0x3fffff,
    RWMAC_PRND_VAL_POS = 0,
};

enum RWMAC_REG_DFCNTL0_1US_FIELD
{
    RWMAC_RXSAMPSTINST0_1US_MASK = (int)0xff000000,
    RWMAC_RXSAMPSTINST0_1US_POS = 24,
    RWMAC_RXSWSTINST0_1US_MASK = (int)0xff0000,
    RWMAC_RXSWSTINST0_1US_POS = 16,
    RWMAC_TXSWSTINST0_1US_MASK = (int)0xff,
    RWMAC_TXSWSTINST0_1US_POS = 0,
};

enum RWMAC_REG_DFCNTL0_2US_FIELD
{
    RWMAC_RXSAMPSTINST0_2US_MASK = (int)0xff000000,
    RWMAC_RXSAMPSTINST0_2US_POS = 24,
    RWMAC_RXSWSTINST0_2US_MASK = (int)0xff0000,
    RWMAC_RXSWSTINST0_2US_POS = 16,
    RWMAC_TXSWSTINST0_2US_MASK = (int)0xff,
    RWMAC_TXSWSTINST0_2US_POS = 0,
};

enum RWMAC_REG_DFCNTL1_1US_FIELD
{
    RWMAC_RXSAMPSTINST1_1US_MASK = (int)0xff000000,
    RWMAC_RXSAMPSTINST1_1US_POS = 24,
    RWMAC_RXSWSTINST1_1US_MASK = (int)0xff0000,
    RWMAC_RXSWSTINST1_1US_POS = 16,
    RWMAC_TXSWSTINST1_1US_MASK = (int)0xff,
    RWMAC_TXSWSTINST1_1US_POS = 0,
};

enum RWMAC_REG_DFCNTL1_2US_FIELD
{
    RWMAC_RXSAMPSTINST1_2US_MASK = (int)0xff000000,
    RWMAC_RXSAMPSTINST1_2US_POS = 24,
    RWMAC_RXSWSTINST1_2US_MASK = (int)0xff0000,
    RWMAC_RXSWSTINST1_2US_POS = 16,
    RWMAC_TXSWSTINST1_2US_MASK = (int)0xff,
    RWMAC_TXSWSTINST1_2US_POS = 0,
};

enum RWMAC_REG_DFCURRENTPTR_FIELD
{
    RWMAC_DFCURRENTPTR_MASK = (int)0x3fff,
    RWMAC_DFCURRENTPTR_POS = 0,
};

enum RWMAC_REG_DFANTCNTL_FIELD
{
    RWMAC_RXPRIMIDCNTLEN_MASK = (int)0x8000,
    RWMAC_RXPRIMIDCNTLEN_POS = 15,
    RWMAC_RXPRIMANTID_MASK = (int)0x7f00,
    RWMAC_RXPRIMANTID_POS = 8,
    RWMAC_TXPRIMIDCNTLEN_MASK = (int)0x80,
    RWMAC_TXPRIMIDCNTLEN_POS = 7,
    RWMAC_TXPRIMANTID_MASK = (int)0x7f,
    RWMAC_TXPRIMANTID_POS = 0,
};

enum RWMAC_REG_DFIFCNTL_FIELD
{
    RWMAC_ANTSWITCH_BEH_MASK = (int)0x80,
    RWMAC_ANTSWITCH_BEH_POS = 7,
    RWMAC_SAMPREQ_BEH_MASK = (int)0x40,
    RWMAC_SAMPREQ_BEH_POS = 6,
    RWMAC_SAMPVALID_BEH_MASK = (int)0x30,
    RWMAC_SAMPVALID_BEH_POS = 4,
    RWMAC_IF_WIDTH_MASK = (int)0xc,
    RWMAC_IF_WIDTH_POS = 2,
    RWMAC_MSB_LSB_ORDER_MASK = (int)0x2,
    RWMAC_MSB_LSB_ORDER_POS = 1,
    RWMAC_SYMBOL_ORDER_MASK = (int)0x1,
    RWMAC_SYMBOL_ORDER_POS = 0,
};

#ifdef __cplusplus
}
#endif

#endif