import os
import sys
Import('env')
env['ABI'] = 'ilp32e'
env['ARCH'] = 'rv32emc'

def plf_postaction(target):
    env.AddPostAction(target,Action('$OBJDUMP -d -z -x $TARGET > ${TARGET.base}.asm'))
    target_path = str(target[0]).replace('.elf','')
    app_hex = env.Command(target_path+'.hex',target[0],Action('$OBJCOPY -O ihex -j .text $SOURCES $TARGET'))




def plf_build(name,app_src,rtos,with_startup,ble,mesh,objprefix):
    start_src = []
    if with_startup:
        start_src = env.variant_dir_add_source('build/$IC/soc/','$SDK_ROOT/soc/',[
            'rv32/startup.c',
        ])
    sdk_src = []
    sdk_src += env.variant_dir_add_source('build/$IC/soc/','$SDK_ROOT/soc/',[
        'rv32/systick.c',
        'rv32/swint_handler.c',
        'rv32/int_call_asm.S',
        'rv32/taurus/cpu.c',
        'rv32/taurus/platform.c',
        'rv32/taurus/stack_var.c',
        'rv32/taurus/sleep.c',
        'rv32/taurus/sys_stat.c',
        'rv32/taurus/sleep_asm.S',
        'rv32/taurus/exception_entry.S',
        'rv32/taurus/delay_asm.S',
        'rv32/taurus/lsqspi_msp.c',
        'rv32/taurus/uart_msp.c',
        'rv32/taurus/i2c_msp.c',
        'rv32/taurus/modem_rf_taurus.c',
        'rv32/taurus/lscache_msp.c',
        'rv32/taurus/io_config.c',
        'rv32/taurus/lstimer_msp.c',
        'rv32/taurus/lspis_msp.c',
        'rv32/taurus/exception_isr.c',
    ])
    sdk_src += env.variant_dir_add_source('build/$IC/peripheral/','$SDK_ROOT/peripheral/',[
        'src/flash_svcall.c',
        #'src/adc_dma.c',
        #'src/calc_div.c',
        #'src/dmac.c',
        #'src/lsadc.c',
        'src/lscache.c',
        #'src/lscrypt.c',
        #'src/lsi2c.c',
        #'src/lsiwdg.c',
        #'src/lspdm_dma.c',
        #'src/lspdm.c',
        #'src/lspis.c',
        'src/lsqspi.c',
        #'src/lsrtc.c',
        #'src/lsspi_dma.c',
        #'src/lsspi.c',
        #'src/lsssi_dma.c',
        #'src/lsssi.c',
        #'src/lstimer.c',
        #'src/lstrng.c',
        'src/spi_flash_lsqspi.c',
        'src/spi_flash.c',
        #'src/uart_dma.c',
        'src/uart.c',
        #'src/lsecc.c',
    ])
    sdk_src += env.variant_dir_add_source('build/$IC/module/','$SDK_ROOT/module/',[
        'common/common.c',
        'common/circular_doubly_linked_list.c',
        #'common/linked_async_framework.c',
        #'common/async_call.c',
        'common/sw_timer.c',
        #'calendar/calendar.c',
        'crc/crc16.c',
        'debug/log.c',
        'debug/ls_dbg.c',
        'debug/$BASE_ARCH/$COMPILER/ls_dbg_asm.S',
        #'debug/RTT/SEGGER_RTT.c',
        'static_buffer/linked_buffer.c',
        'static_buffer/fifo.c',
        'tinyfs/tinyfs_nvm.c',
        'tinyfs/tinyfs_write_cache.c',
        'tinyfs/tinyfs.c',
        'tinycrypt/lib/source/sha256.c',
        'tinycrypt/lib/source/utils.c',
        #'adpcm/adpcm.c',
        #'micro-ecc/uECC.c',
        'ble/ble_common_api.c',
        'ble/ll_buf.c',
    ])
    env.add_include('$SDK_ROOT/',[
        '.',
        'peripheral/inc',
        'peripheral/api',
        'module/common',
        #'module/calendar',
        'module/crc',
        'module/debug',
        'module/debug/RTT',
        'module/static_buffer',
        'module/tinyfs',
        'module/tinycrypt/lib/include',
        #'module/micro-ecc',
        #'module/adpcm',
        'module/ble',
        'module/ble/ll',
        'module/ble/prf',
        'soc',
        'soc/rv32',
        'soc/rv32/taurus',
        'soc/rv32/taurus/integration',
    ])
    rtos_src = []
    if not rtos is None:
        rtos_src = env.variant_dir_add_source('build/$IC/rtos/','$SDK_ROOT/rtos/freertos/',[
            'croutine.c',
            'event_groups.c',
            'list.c',
            'queue.c',
            'stream_buffer.c',
            'tasks.c',
            'timers.c',
            'heap_4.c',
        ])
        rtos_src += env.variant_dir_add_source('build/$IC/soc/','$SDK_ROOT/soc/',[
            'rv32/taurus/compiler/$COMPILER/port.c',
            'rv32/taurus/freertos_adapt.c',
        ])
        env.add_include('$SDK_ROOT/',['rtos/freertos/include'])
    if mesh:
        pass
    elif ble:
        env.Append(LIBS = [File(env.subst('$SDK_ROOT/soc/rv32/taurus/bin/libfw.o'))])
        env['STACK_HEX'] = File(env.subst('$SDK_ROOT/soc/rv32/taurus/bin/fw.hex'))
        if env.get('LINKSCRIPT') is None:
            env['LINKSCRIPT'] = File(env.subst("$SDK_ROOT/soc/rv32/taurus/link_script.txt"))
    else:
        pass
    target =  env.Program('build/$IC/'+name,sdk_src + start_src + app_src + rtos_src,OBJPREFIX = objprefix)
    env.Depends(target,[env['LINKSCRIPT']])
    return target

env.plf_postaction = plf_postaction
env.plf_build = plf_build
