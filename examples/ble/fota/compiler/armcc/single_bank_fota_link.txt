#! armcc -E

#define FLASH_BASE 0x18000000
#define FLASH_BASE_USER 0x18070000
#define FLASH_SIZE 0x80000
#define FLASH_END (FLASH_BASE + FLASH_SIZE)
#define RAM_BASE 0
#define RAM_SIZE 0xc000
#define RAM_END (RAM_BASE + RAM_SIZE)
#define RESET_RETAIN_VALID_START_ADDR 0x6EA8
#define RESET_RETAIN_VALID_END_ADDR 0xB800
#define MESH_STACK_BSS_END 0x844
#define BLE_STACK_BSS_END 0x74c
LR_FLASH FLASH_BASE_USER FLASH_SIZE{
    VECTOR_CODE RAM_BASE{
        *(RESET, +First)
    }
	
    RAM_DATA_CODE defined(__mesh_stack_bss_end__)?MESH_STACK_BSS_END:defined(__stack_bss_end__)?BLE_STACK_BSS_END:ImageLimit(VECTOR_CODE){
        *(+RW)
        *(.xip_banned*)
    }
    
    FLASH_CODE FLASH_BASE_USER+ImageLength(RAM_DATA_CODE)+ImageLength(VECTOR_CODE) ALIGN 0x4{
        *(InRoot$$Sections)
        .ANY(+RO)
    }
    ScatterAssert(ImageLimit(FLASH_CODE) <= FLASH_END)
    
    BSS ImageLimit(RAM_DATA_CODE) ALIGN 0x4
    {
        *(SECTION_RTT)
        *(+ZI)
    }
    HEAP +0 UNINIT
    {
        *(HEAP)
    } 
    ;ScatterAssert(ImageLimit(HEAP)>=RESET_RETAIN_VALID_START_ADDR)
    RESET_RETAIN_DATA (ImageLimit(HEAP) < RESET_RETAIN_VALID_START_ADDR ? RESET_RETAIN_VALID_START_ADDR : ImageLimit(HEAP)) UNINIT EMPTY 0x8
    {
        
    }
    ScatterAssert(ImageLimit(RESET_RETAIN_DATA)<=RESET_RETAIN_VALID_END_ADDR)
    RW_IRAM6 (ImageLimit(RESET_RETAIN_DATA)>0x0000A000?AlignExpr(ImageLimit(RESET_RETAIN_DATA),1024):0xa000) UNINIT ALIGN 1024 0x2000 { 
        *(DMAC1)
        *(DMARAM)
    }
    STACK +0 UNINIT
    {
        *(STACK)
    } 
    ScatterAssert(ImageLimit(STACK)<=RAM_END)
}
