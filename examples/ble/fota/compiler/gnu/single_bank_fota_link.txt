MEMORY
{
  RAM (rwx) : ORIGIN = 0x0000, LENGTH = 0xc000
  FLASH (rx) : ORIGIN = 0x18070000, LENGTH = 0x40000
}

SECTIONS
{
    __vector_lma__ = ORIGIN(FLASH);
    
    .vector :
    {
        . = ALIGN(4);
        __vector__start__ = .;
        KEEP(*(.isr_vector))
        __vector__end__ = .;
    }>RAM AT>FLASH
    
    .reset_retain (NOLOAD) :
    {
        . = ALIGN(4);
        reset_retain_start = .;
        . += 2*4;
        reset_retain_end = .;
    }>RAM AT>FLASH

    __data_lma__ = __vector_lma__ + SIZEOF(.vector);
    
    .data :
    {
        . = ALIGN(4);
        __data_start__ = .;
        *(.data*)
        *(.xip_banned)
        *(.text.memcpy)
        __data_end__ = ALIGN(4);
    }>RAM AT> FLASH   

    .text :
    {
    
        KEEP(*(.init))
        KEEP(*(.fini))

        *crtbegin.o(.ctors)
        *crtbegin?.o(.ctors)
        *(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
        *(SORT(.ctors.*))
        *(.ctors)


        *crtbegin.o(.dtors)
        *crtbegin?.o(.dtors)
        *(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
        *(SORT(.dtors.*))
        *(.dtors)

        *(.eh_frame*)
        *(.text* .rodata*)
    }>FLASH
    
    .bss (NOLOAD):
    {
        __bss_start__ = .;
        *(.bss*)
        *(COMMON)
        *(SECTION_RTT)
        __bss_end__ = ALIGN(4);
    }>RAM


    .heap (NOLOAD):
    {
        __end__ = .;
        PROVIDE(end = .);
        *(.heap*)
        __HeapLimit = .;
    } > RAM

    /* .stack_dummy section doesn't contains any symbols. It is only
     * used for linker to calculate size of stack sections, and assign
     * values to stack symbols later */
    .stack_dummy (NOLOAD):
    {
        *(.stack*)
    } > RAM

    /* Set stack top to end of RAM, and stack limit move down by
     * size of stack_dummy section */
    __StackTop = __stack_data_start__;
    __StackLimit = __StackTop - SIZEOF(.stack_dummy);
    PROVIDE(__stack = __StackTop);
    
    /* Check if data + heap + stack exceeds RAM limit */
    ASSERT(__StackLimit >= __HeapLimit, "region RAM overflowed with stack")
    
}